/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.FlatAvaProject;
import com.danglit.avacloud.client.models.ProjectDto;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RebConversionApi
 */
@Ignore
public class RebConversionApiTest {

    private final RebConversionApi api = new RebConversionApi();

    
    /**
     * Converts REB files to Dangl.AVA projects
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebConversionConvertToAvaTest() throws Exception {
        File rebFile = null;
        Boolean removePlainTextLongTexts = null;
        Boolean removeHtmlLongTexts = null;
        ProjectDto response = api.rebConversionConvertToAva(rebFile, removePlainTextLongTexts, removeHtmlLongTexts);

        // TODO: test validations
    }
    
    /**
     * Converts REB files to Excel
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebConversionConvertToExcelTest() throws Exception {
        File rebFile = null;
        Boolean writePrices = null;
        Boolean writeLongTexts = null;
        String conversionCulture = null;
        Boolean includeArticleNumbers = null;
        Boolean lockAllCellsButPrices = null;
        File response = api.rebConversionConvertToExcel(rebFile, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices);

        // TODO: test validations
    }
    
    /**
     * Converts REB files to Dangl.AVA projects
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebConversionConvertToFlatAvaTest() throws Exception {
        File rebFile = null;
        FlatAvaProject response = api.rebConversionConvertToFlatAva(rebFile);

        // TODO: test validations
    }
    
    /**
     * Converts REB files to GAEB files
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebConversionConvertToGaebTest() throws Exception {
        File rebFile = null;
        String destinationGaebType = null;
        String targetExchangePhaseTransform = null;
        Boolean enforceStrictOfferPhaseLongTextOutput = null;
        Boolean exportQuantityDetermination = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        Boolean forceIncludeDescriptions = null;
        Boolean treatNullItemNumberSchemaAsInvalid = null;
        File response = api.rebConversionConvertToGaeb(rebFile, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid);

        // TODO: test validations
    }
    
    /**
     * Converts REB files to Oenorm
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebConversionConvertToOenormTest() throws Exception {
        File rebFile = null;
        String destinationOenormType = null;
        Boolean tryRepairProjectStructure = null;
        Boolean skipTryEnforceSchemaCompliantXmlOutput = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        File response = api.rebConversionConvertToOenorm(rebFile, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts);

        // TODO: test validations
    }
    
}
