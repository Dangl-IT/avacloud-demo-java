/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.FlatAvaProject;
import com.danglit.avacloud.client.models.ProjectDto;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlatAvaConversionApi
 */
@Ignore
public class FlatAvaConversionApiTest {

    private final FlatAvaConversionApi api = new FlatAvaConversionApi();

    
    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToAvaTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        Boolean removePlainTextLongTexts = null;
        Boolean removeHtmlLongTexts = null;
        ProjectDto response = api.flatAvaConversionConvertToAva(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to Datanorm
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToDatanormTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String datanormDestinationVersion = null;
        File response = api.flatAvaConversionConvertToDatanorm(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to Excel
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToExcelTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        Boolean writePrices = null;
        Boolean writeLongTexts = null;
        String conversionCulture = null;
        Boolean includeArticleNumbers = null;
        Boolean lockAllCellsButPrices = null;
        File response = api.flatAvaConversionConvertToExcel(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToFlatAvaTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        FlatAvaProject response = api.flatAvaConversionConvertToFlatAva(flatAvaProject, tryAutoGenerateItemNumbersAndSchema);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to GAEB
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToGaebTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String destinationGaebType = null;
        String targetExchangePhaseTransform = null;
        Boolean enforceStrictOfferPhaseLongTextOutput = null;
        Boolean exportQuantityDetermination = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        Boolean forceIncludeDescriptions = null;
        Boolean treatNullItemNumberSchemaAsInvalid = null;
        File response = api.flatAvaConversionConvertToGaeb(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to IDS Connect files
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToIdsConnectTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String version = null;
        File response = api.flatAvaConversionConvertToIdsConnect(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, version);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to Oenorm
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToOenormTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String destinationOenormType = null;
        Boolean tryRepairProjectStructure = null;
        Boolean skipTryEnforceSchemaCompliantXmlOutput = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        File response = api.flatAvaConversionConvertToOenorm(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to REB
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToRebTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String destinationRebType = null;
        String lastRowAddress = null;
        File response = api.flatAvaConversionConvertToReb(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, lastRowAddress);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to SIA 451
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToSiaTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String siaDestinationType = null;
        File response = api.flatAvaConversionConvertToSia(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, siaDestinationType);

        // TODO: test validations
    }
    
    /**
     * Converts flat Dangl.AVA projects to UGL
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void flatAvaConversionConvertToUglTest() throws Exception {
        FlatAvaProject flatAvaProject = null;
        Boolean tryAutoGenerateItemNumbersAndSchema = null;
        String uglDestinationVersion = null;
        File response = api.flatAvaConversionConvertToUgl(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion);

        // TODO: test validations
    }
    
}
