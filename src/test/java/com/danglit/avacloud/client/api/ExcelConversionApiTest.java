/*
 * AVACloud API 1.29.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.29.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.ProjectDto;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExcelConversionApi
 */
@Ignore
public class ExcelConversionApiTest {

    private final ExcelConversionApi api = new ExcelConversionApi();

    
    /**
     * Converts Excel files to Dangl.AVA projects.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void excelConversionConvertToAvaTest() throws Exception {
        File excelFile = null;
        Boolean readNewElements = null;
        Boolean rebuildItemNumberSchema = null;
        Boolean removePlainTextLongTexts = null;
        Boolean removeHtmlLongTexts = null;
        ProjectDto response = api.excelConversionConvertToAva(excelFile, readNewElements, rebuildItemNumberSchema, removePlainTextLongTexts, removeHtmlLongTexts);

        // TODO: test validations
    }
    
    /**
     * Converts Excel files to Excel files. Used, for example, when elements were added in excel to generate or modify a project. The Excel file can then be shared containing the full project with all formattings, formulas and styles applied.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void excelConversionConvertToExcelTest() throws Exception {
        File excelFile = null;
        Boolean readNewElements = null;
        Boolean rebuildItemNumberSchema = null;
        Boolean writePrices = null;
        Boolean writeLongTexts = null;
        String conversionCulture = null;
        File response = api.excelConversionConvertToExcel(excelFile, readNewElements, rebuildItemNumberSchema, writePrices, writeLongTexts, conversionCulture);

        // TODO: test validations
    }
    
    /**
     * Converts Excel files to GAEB files.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void excelConversionConvertToGaebTest() throws Exception {
        File excelFile = null;
        Boolean readNewElements = null;
        Boolean rebuildItemNumberSchema = null;
        String destinationGaebType = null;
        String targetExchangePhaseTransform = null;
        Boolean enforceStrictOfferPhaseLongTextOutput = null;
        Boolean exportQuantityDetermination = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        File response = api.excelConversionConvertToGaeb(excelFile, readNewElements, rebuildItemNumberSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts);

        // TODO: test validations
    }
    
    /**
     * Converts Excel files to Oenorm files.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void excelConversionConvertToOenormTest() throws Exception {
        File excelFile = null;
        Boolean readNewElements = null;
        Boolean rebuildItemNumberSchema = null;
        String destinationOenormType = null;
        Boolean tryRepairProjectStructure = null;
        Boolean skipTryEnforceSchemaCompliantXmlOutput = null;
        Boolean removeUnprintableCharactersFromTexts = null;
        File response = api.excelConversionConvertToOenorm(excelFile, readNewElements, rebuildItemNumberSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts);

        // TODO: test validations
    }
    
}
