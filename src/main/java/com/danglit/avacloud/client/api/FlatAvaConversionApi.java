/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.invoker.ApiCallback;
import com.danglit.avacloud.client.invoker.ApiClient;
import com.danglit.avacloud.client.invoker.ApiException;
import com.danglit.avacloud.client.invoker.ApiResponse;
import com.danglit.avacloud.client.invoker.Configuration;
import com.danglit.avacloud.client.invoker.Pair;
import com.danglit.avacloud.client.invoker.ProgressRequestBody;
import com.danglit.avacloud.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.FlatAvaProject;
import com.danglit.avacloud.client.models.ProjectDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlatAvaConversionApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public FlatAvaConversionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlatAvaConversionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for flatAvaConversionConvertToAva
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToAvaCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/ava";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (removePlainTextLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemovePlainTextLongTexts", removePlainTextLongTexts));
        if (removeHtmlLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveHtmlLongTexts", removeHtmlLongTexts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.com.dangl-it.ProjectDto.v1+json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToAvaValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToAva(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToAvaCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ProjectDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDto flatAvaConversionConvertToAva(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        ApiResponse<ProjectDto> resp = flatAvaConversionConvertToAvaWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ApiResponse&lt;ProjectDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDto> flatAvaConversionConvertToAvaWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToAvaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, null, null);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties. (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToAvaAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ApiCallback<ProjectDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToAvaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToDatanorm
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToDatanormCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/datanorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (datanormDestinationVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DatanormDestinationVersion", datanormDestinationVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToDatanormValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToDatanorm(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToDatanormCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to Datanorm
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToDatanorm(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToDatanormWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to Datanorm
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToDatanormWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToDatanormValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to Datanorm (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToDatanormAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToDatanormValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToExcel
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files. The following conversion cultures are available: &#39;en&#39; for English, &#39;de&#39; for German, &#39;fr&#39; for French, &#39; it&#39; for Italian and &#39; es&#39; for Spanish. If the culture is not supported, &#39;en&#39; will be used. (optional)
     * @param includeArticleNumbers If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from &#39;position.commerceProperties.articleNumber&#39; (optional)
     * @param lockAllCellsButPrices If this is enabled, then all cells except the unit price cells will be locked, so users can not accidentally modify other fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToExcelCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, Boolean includeArticleNumbers, Boolean lockAllCellsButPrices, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (writePrices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WritePrices", writePrices));
        if (writeLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WriteLongTexts", writeLongTexts));
        if (conversionCulture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ConversionCulture", conversionCulture));
        if (includeArticleNumbers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IncludeArticleNumbers", includeArticleNumbers));
        if (lockAllCellsButPrices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LockAllCellsButPrices", lockAllCellsButPrices));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToExcelValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, Boolean includeArticleNumbers, Boolean lockAllCellsButPrices, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToExcel(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToExcelCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to Excel
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files. The following conversion cultures are available: &#39;en&#39; for English, &#39;de&#39; for German, &#39;fr&#39; for French, &#39; it&#39; for Italian and &#39; es&#39; for Spanish. If the culture is not supported, &#39;en&#39; will be used. (optional)
     * @param includeArticleNumbers If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from &#39;position.commerceProperties.articleNumber&#39; (optional)
     * @param lockAllCellsButPrices If this is enabled, then all cells except the unit price cells will be locked, so users can not accidentally modify other fields. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToExcel(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, Boolean includeArticleNumbers, Boolean lockAllCellsButPrices) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToExcelWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to Excel
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files. The following conversion cultures are available: &#39;en&#39; for English, &#39;de&#39; for German, &#39;fr&#39; for French, &#39; it&#39; for Italian and &#39; es&#39; for Spanish. If the culture is not supported, &#39;en&#39; will be used. (optional)
     * @param includeArticleNumbers If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from &#39;position.commerceProperties.articleNumber&#39; (optional)
     * @param lockAllCellsButPrices If this is enabled, then all cells except the unit price cells will be locked, so users can not accidentally modify other fields. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToExcelWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, Boolean includeArticleNumbers, Boolean lockAllCellsButPrices) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToExcelValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to Excel (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files. The following conversion cultures are available: &#39;en&#39; for English, &#39;de&#39; for German, &#39;fr&#39; for French, &#39; it&#39; for Italian and &#39; es&#39; for Spanish. If the culture is not supported, &#39;en&#39; will be used. (optional)
     * @param includeArticleNumbers If this is enabled, then a new column will be created in the overview worksheet that contains the article numbers for positions. Article numbers will be read from &#39;position.commerceProperties.articleNumber&#39; (optional)
     * @param lockAllCellsButPrices If this is enabled, then all cells except the unit price cells will be locked, so users can not accidentally modify other fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToExcelAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, Boolean includeArticleNumbers, Boolean lockAllCellsButPrices, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToExcelValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, includeArticleNumbers, lockAllCellsButPrices, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToFlatAva
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToFlatAvaCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/flat-ava";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToFlatAvaValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToFlatAva(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToFlatAvaCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @return FlatAvaProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlatAvaProject flatAvaConversionConvertToFlatAva(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema) throws ApiException {
        ApiResponse<FlatAvaProject> resp = flatAvaConversionConvertToFlatAvaWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @return ApiResponse&lt;FlatAvaProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlatAvaProject> flatAvaConversionConvertToFlatAvaWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToFlatAvaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, null, null);
        Type localVarReturnType = new TypeToken<FlatAvaProject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties. (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToFlatAvaAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ApiCallback<FlatAvaProject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToFlatAvaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlatAvaProject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToGaeb
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done. The phases are: Base &#x3D; 81 CostEstimate &#x3D; 82 OfferRequest &#x3D; 83 Offer &#x3D; 84 SideOffer &#x3D; 85 Grant &#x3D; 86 (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToGaebCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/gaeb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationGaebType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationGaebType", destinationGaebType));
        if (targetExchangePhaseTransform != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TargetExchangePhaseTransform", targetExchangePhaseTransform));
        if (enforceStrictOfferPhaseLongTextOutput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EnforceStrictOfferPhaseLongTextOutput", enforceStrictOfferPhaseLongTextOutput));
        if (exportQuantityDetermination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ExportQuantityDetermination", exportQuantityDetermination));
        if (removeUnprintableCharactersFromTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveUnprintableCharactersFromTexts", removeUnprintableCharactersFromTexts));
        if (forceIncludeDescriptions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ForceIncludeDescriptions", forceIncludeDescriptions));
        if (treatNullItemNumberSchemaAsInvalid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TreatNullItemNumberSchemaAsInvalid", treatNullItemNumberSchemaAsInvalid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToGaebValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToGaeb(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToGaebCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to GAEB
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done. The phases are: Base &#x3D; 81 CostEstimate &#x3D; 82 OfferRequest &#x3D; 83 Offer &#x3D; 84 SideOffer &#x3D; 85 Grant &#x3D; 86 (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToGaeb(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToGaebWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to GAEB
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done. The phases are: Base &#x3D; 81 CostEstimate &#x3D; 82 OfferRequest &#x3D; 83 Offer &#x3D; 84 SideOffer &#x3D; 85 Grant &#x3D; 86 (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToGaebWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToGaebValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to GAEB (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done. The phases are: Base &#x3D; 81 CostEstimate &#x3D; 82 OfferRequest &#x3D; 83 Offer &#x3D; 84 SideOffer &#x3D; 85 Grant &#x3D; 86 (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToGaebAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToGaebValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToIdsConnect
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param version The IDS Connect version to convert to. Defaults to V2_5. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToIdsConnectCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/ids-connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToIdsConnectValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToIdsConnect(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToIdsConnectCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to IDS Connect files
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param version The IDS Connect version to convert to. Defaults to V2_5. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToIdsConnect(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String version) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToIdsConnectWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, version);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to IDS Connect files
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param version The IDS Connect version to convert to. Defaults to V2_5. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToIdsConnectWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String version) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToIdsConnectValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, version, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to IDS Connect files (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param version The IDS Connect version to convert to. Defaults to V2_5. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToIdsConnectAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String version, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToIdsConnectValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToOenorm
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToOenormCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/oenorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationOenormType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationOenormType", destinationOenormType));
        if (tryRepairProjectStructure != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryRepairProjectStructure", tryRepairProjectStructure));
        if (skipTryEnforceSchemaCompliantXmlOutput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SkipTryEnforceSchemaCompliantXmlOutput", skipTryEnforceSchemaCompliantXmlOutput));
        if (removeUnprintableCharactersFromTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveUnprintableCharactersFromTexts", removeUnprintableCharactersFromTexts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToOenormValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToOenorm(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToOenormCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to Oenorm
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToOenorm(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToOenormWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to Oenorm
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToOenormWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToOenormValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to Oenorm (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToOenormAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToOenormValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToReb
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param lastRowAddress If this is present, the export to REB will be started from the next available row address after the given one. This must be a valid 6 character address, e.g. \&quot;1234A0\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToRebCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, String lastRowAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/reb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationRebType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationRebType", destinationRebType));
        if (lastRowAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LastRowAddress", lastRowAddress));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToRebValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, String lastRowAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToReb(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToRebCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, lastRowAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to REB
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param lastRowAddress If this is present, the export to REB will be started from the next available row address after the given one. This must be a valid 6 character address, e.g. \&quot;1234A0\&quot; (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToReb(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, String lastRowAddress) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToRebWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, lastRowAddress);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to REB
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param lastRowAddress If this is present, the export to REB will be started from the next available row address after the given one. This must be a valid 6 character address, e.g. \&quot;1234A0\&quot; (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToRebWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, String lastRowAddress) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToRebValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, lastRowAddress, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to REB (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param lastRowAddress If this is present, the export to REB will be started from the next available row address after the given one. This must be a valid 6 character address, e.g. \&quot;1234A0\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToRebAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, String lastRowAddress, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToRebValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, lastRowAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToSia
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param siaDestinationType Defaults to Sia451 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToSiaCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String siaDestinationType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/sia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (siaDestinationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SiaDestinationType", siaDestinationType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToSiaValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String siaDestinationType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToSia(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToSiaCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, siaDestinationType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to SIA 451
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param siaDestinationType Defaults to Sia451 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToSia(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String siaDestinationType) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToSiaWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, siaDestinationType);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to SIA 451
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param siaDestinationType Defaults to Sia451 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToSiaWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String siaDestinationType) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToSiaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, siaDestinationType, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to SIA 451 (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param siaDestinationType Defaults to Sia451 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToSiaAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String siaDestinationType, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToSiaValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, siaDestinationType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for flatAvaConversionConvertToUgl
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToUglCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = flatAvaProject;

        // create path and map variables
        String localVarPath = "/conversion/flat-ava/ugl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (uglDestinationVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UglDestinationVersion", uglDestinationVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call flatAvaConversionConvertToUglValidateBeforeCall(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'flatAvaProject' is set
        if (flatAvaProject == null) {
            throw new ApiException("Missing the required parameter 'flatAvaProject' when calling flatAvaConversionConvertToUgl(Async)");
        }
        

        com.squareup.okhttp.Call call = flatAvaConversionConvertToUglCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts flat Dangl.AVA projects to UGL
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File flatAvaConversionConvertToUgl(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion) throws ApiException {
        ApiResponse<File> resp = flatAvaConversionConvertToUglWithHttpInfo(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion);
        return resp.getData();
    }

    /**
     * Converts flat Dangl.AVA projects to UGL
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> flatAvaConversionConvertToUglWithHttpInfo(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion) throws ApiException {
        com.squareup.okhttp.Call call = flatAvaConversionConvertToUglValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts flat Dangl.AVA projects to UGL (asynchronously)
     * 
     * @param flatAvaProject The flat Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call flatAvaConversionConvertToUglAsync(FlatAvaProject flatAvaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = flatAvaConversionConvertToUglValidateBeforeCall(flatAvaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
