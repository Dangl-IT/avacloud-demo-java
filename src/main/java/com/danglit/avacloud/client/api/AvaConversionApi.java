/*
 * AVACloud API 1.10.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.invoker.ApiCallback;
import com.danglit.avacloud.client.invoker.ApiClient;
import com.danglit.avacloud.client.invoker.ApiException;
import com.danglit.avacloud.client.invoker.ApiResponse;
import com.danglit.avacloud.client.invoker.Configuration;
import com.danglit.avacloud.client.invoker.Pair;
import com.danglit.avacloud.client.invoker.ProgressRequestBody;
import com.danglit.avacloud.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.ProjectDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AvaConversionApi {
    private ApiClient apiClient;

    public AvaConversionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvaConversionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for avaConversionConvertToAva
     * @param avaProject The Dangl.AVA project (required)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToAvaCall(ProjectDto avaProject, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/ava";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (removePlainTextLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemovePlainTextLongTexts", removePlainTextLongTexts));
        if (removeHtmlLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveHtmlLongTexts", removeHtmlLongTexts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.com.dangl-it.ProjectDto.v1+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToAvaValidateBeforeCall(ProjectDto avaProject, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToAva(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToAvaCall(avaProject, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ProjectDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDto avaConversionConvertToAva(ProjectDto avaProject, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        ApiResponse<ProjectDto> resp = avaConversionConvertToAvaWithHttpInfo(avaProject, removePlainTextLongTexts, removeHtmlLongTexts);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ApiResponse&lt;ProjectDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDto> avaConversionConvertToAvaWithHttpInfo(ProjectDto avaProject, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToAvaValidateBeforeCall(avaProject, removePlainTextLongTexts, removeHtmlLongTexts, null, null);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties. (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToAvaAsync(ProjectDto avaProject, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ApiCallback<ProjectDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToAvaValidateBeforeCall(avaProject, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToExcel
     * @param avaProject The Dangl.AVA project (required)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToExcelCall(ProjectDto avaProject, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (writePrices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WritePrices", writePrices));
        if (writeLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WriteLongTexts", writeLongTexts));
        if (conversionCulture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ConversionCulture", conversionCulture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToExcelValidateBeforeCall(ProjectDto avaProject, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToExcel(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToExcelCall(avaProject, writePrices, writeLongTexts, conversionCulture, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Excel
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToExcel(ProjectDto avaProject, Boolean writePrices, Boolean writeLongTexts, String conversionCulture) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToExcelWithHttpInfo(avaProject, writePrices, writeLongTexts, conversionCulture);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Excel
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToExcelWithHttpInfo(ProjectDto avaProject, Boolean writePrices, Boolean writeLongTexts, String conversionCulture) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToExcelValidateBeforeCall(avaProject, writePrices, writeLongTexts, conversionCulture, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Excel (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToExcelAsync(ProjectDto avaProject, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToExcelValidateBeforeCall(avaProject, writePrices, writeLongTexts, conversionCulture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToGaeb
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToGaebCall(ProjectDto avaProject, String destinationGaebType, String targetExchangePhaseTransform, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/gaeb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destinationGaebType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationGaebType", destinationGaebType));
        if (targetExchangePhaseTransform != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TargetExchangePhaseTransform", targetExchangePhaseTransform));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToGaebValidateBeforeCall(ProjectDto avaProject, String destinationGaebType, String targetExchangePhaseTransform, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToGaeb(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToGaebCall(avaProject, destinationGaebType, targetExchangePhaseTransform, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to GAEB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToGaeb(ProjectDto avaProject, String destinationGaebType, String targetExchangePhaseTransform) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToGaebWithHttpInfo(avaProject, destinationGaebType, targetExchangePhaseTransform);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to GAEB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToGaebWithHttpInfo(ProjectDto avaProject, String destinationGaebType, String targetExchangePhaseTransform) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToGaebValidateBeforeCall(avaProject, destinationGaebType, targetExchangePhaseTransform, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to GAEB (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToGaebAsync(ProjectDto avaProject, String destinationGaebType, String targetExchangePhaseTransform, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToGaebValidateBeforeCall(avaProject, destinationGaebType, targetExchangePhaseTransform, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToOenorm
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToOenormCall(ProjectDto avaProject, String destinationOenormType, Boolean tryRepairProjectStructure, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/oenorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (destinationOenormType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationOenormType", destinationOenormType));
        if (tryRepairProjectStructure != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryRepairProjectStructure", tryRepairProjectStructure));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToOenormValidateBeforeCall(ProjectDto avaProject, String destinationOenormType, Boolean tryRepairProjectStructure, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToOenorm(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToOenormCall(avaProject, destinationOenormType, tryRepairProjectStructure, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Oenorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToOenorm(ProjectDto avaProject, String destinationOenormType, Boolean tryRepairProjectStructure) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToOenormWithHttpInfo(avaProject, destinationOenormType, tryRepairProjectStructure);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Oenorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToOenormWithHttpInfo(ProjectDto avaProject, String destinationOenormType, Boolean tryRepairProjectStructure) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToOenormValidateBeforeCall(avaProject, destinationOenormType, tryRepairProjectStructure, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Oenorm (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToOenormAsync(ProjectDto avaProject, String destinationOenormType, Boolean tryRepairProjectStructure, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToOenormValidateBeforeCall(avaProject, destinationOenormType, tryRepairProjectStructure, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToReb
     * @param avaProject The Dangl.AVA project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToRebCall(ProjectDto avaProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/reb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToRebValidateBeforeCall(ProjectDto avaProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToReb(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToRebCall(avaProject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to REB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToReb(ProjectDto avaProject) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToRebWithHttpInfo(avaProject);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to REB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToRebWithHttpInfo(ProjectDto avaProject) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToRebValidateBeforeCall(avaProject, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to REB (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToRebAsync(ProjectDto avaProject, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToRebValidateBeforeCall(avaProject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToSia
     * @param avaProject The Dangl.AVA project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToSiaCall(ProjectDto avaProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/sia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToSiaValidateBeforeCall(ProjectDto avaProject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToSia(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToSiaCall(avaProject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to SIA 451
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToSia(ProjectDto avaProject) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToSiaWithHttpInfo(avaProject);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to SIA 451
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToSiaWithHttpInfo(ProjectDto avaProject) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToSiaValidateBeforeCall(avaProject, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to SIA 451 (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToSiaAsync(ProjectDto avaProject, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToSiaValidateBeforeCall(avaProject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
