/*
 * AVACloud API 1.41.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.api;

import com.danglit.avacloud.client.invoker.ApiCallback;
import com.danglit.avacloud.client.invoker.ApiClient;
import com.danglit.avacloud.client.invoker.ApiException;
import com.danglit.avacloud.client.invoker.ApiResponse;
import com.danglit.avacloud.client.invoker.Configuration;
import com.danglit.avacloud.client.invoker.Pair;
import com.danglit.avacloud.client.invoker.ProgressRequestBody;
import com.danglit.avacloud.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.danglit.avacloud.client.models.ApiError;
import java.io.File;
import com.danglit.avacloud.client.models.ProjectDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AvaConversionApi {
    private ApiClient apiClient;

    public AvaConversionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvaConversionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for avaConversionConvertToAva
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToAvaCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/ava";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (removePlainTextLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemovePlainTextLongTexts", removePlainTextLongTexts));
        if (removeHtmlLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveHtmlLongTexts", removeHtmlLongTexts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.com.dangl-it.ProjectDto.v1+json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToAvaValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToAva(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToAvaCall(avaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ProjectDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDto avaConversionConvertToAva(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        ApiResponse<ProjectDto> resp = avaConversionConvertToAvaWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties.
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @return ApiResponse&lt;ProjectDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDto> avaConversionConvertToAvaWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToAvaValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, null, null);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Dangl.AVA. This is useful when you want to generate the calculated properties. (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param removePlainTextLongTexts If set to true, plain text long texts will be removed from the output to reduce response sizes (optional)
     * @param removeHtmlLongTexts If set to true, html long texts will be removed from the output to reduce response sizes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToAvaAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean removePlainTextLongTexts, Boolean removeHtmlLongTexts, final ApiCallback<ProjectDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToAvaValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, removePlainTextLongTexts, removeHtmlLongTexts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToDatanorm
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToDatanormCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/datanorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (datanormDestinationVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DatanormDestinationVersion", datanormDestinationVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToDatanormValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToDatanorm(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToDatanormCall(avaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Datanorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToDatanorm(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToDatanormWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Datanorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToDatanormWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToDatanormValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Datanorm (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param datanormDestinationVersion The Datanorm version to convert to. Defaults to V4. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToDatanormAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String datanormDestinationVersion, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToDatanormValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, datanormDestinationVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToExcel
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToExcelCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (writePrices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WritePrices", writePrices));
        if (writeLongTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WriteLongTexts", writeLongTexts));
        if (conversionCulture != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ConversionCulture", conversionCulture));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToExcelValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToExcel(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToExcelCall(avaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Excel
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToExcel(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToExcelWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Excel
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToExcelWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToExcelValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Excel (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param writePrices Defaults to true (optional)
     * @param writeLongTexts Defaults to true (optional)
     * @param conversionCulture The culture that should be used for the conversion process, to have localized Excel files (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToExcelAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, Boolean writePrices, Boolean writeLongTexts, String conversionCulture, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToExcelValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, writePrices, writeLongTexts, conversionCulture, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToGaeb
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToGaebCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/gaeb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationGaebType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationGaebType", destinationGaebType));
        if (targetExchangePhaseTransform != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TargetExchangePhaseTransform", targetExchangePhaseTransform));
        if (enforceStrictOfferPhaseLongTextOutput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EnforceStrictOfferPhaseLongTextOutput", enforceStrictOfferPhaseLongTextOutput));
        if (exportQuantityDetermination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ExportQuantityDetermination", exportQuantityDetermination));
        if (removeUnprintableCharactersFromTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveUnprintableCharactersFromTexts", removeUnprintableCharactersFromTexts));
        if (forceIncludeDescriptions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ForceIncludeDescriptions", forceIncludeDescriptions));
        if (treatNullItemNumberSchemaAsInvalid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TreatNullItemNumberSchemaAsInvalid", treatNullItemNumberSchemaAsInvalid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToGaebValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToGaeb(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToGaebCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to GAEB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToGaeb(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToGaebWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to GAEB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToGaebWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToGaebValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to GAEB (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationGaebType Defaults to GAEB XML V3.2 (optional)
     * @param targetExchangePhaseTransform Defaults to none, meaning no transformation will be done (optional)
     * @param enforceStrictOfferPhaseLongTextOutput Defaults to false. If this is enabled, exported long texts to GAEB XML that use text additions will be strictly schema compliant. If this is not enabled, any text that is marked to contain a text addition is exported in full to ensure that incorrectly used text additions are still preserved in the export. (optional)
     * @param exportQuantityDetermination Defaults to false. If this is enabled, quantities are exported in detail in GAEB XML targets via the &#39;QtyDeterm&#39; (Quantity Determination, or Quantity Take Off) fields. To control this, you can set custom quantity calculations in the &#39;QuantityComponents&#39; property of positions. Please see the entry for &#39;Quantity Determination&#39; in the Dangl.AVA HowTo documentation section. Please be advised that enabling this might export data that was not intended to be exported, like internal quantity calculation details, depending on what data you put in the &#39;QuantityComponents&#39; property. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param forceIncludeDescriptions If this is enabled, all description elements like texts and execution descriptions will be output to the result. This is mostly only applicable to GAEB exports to phase 84 - Offer, which does typically not include descriptions. (optional)
     * @param treatNullItemNumberSchemaAsInvalid When exporting to GAEB, an item number schema is usually required. AVACloud will try to fix invalid item number schemas. With this setting, you can also tell AVACloud to treat a null value as invalid. Otherwise, null schemas will simply be ignored and not lead to any schema being generated. It is recommended to enable this option, but it is disabled by default for compatibility reasons. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToGaebAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationGaebType, String targetExchangePhaseTransform, Boolean enforceStrictOfferPhaseLongTextOutput, Boolean exportQuantityDetermination, Boolean removeUnprintableCharactersFromTexts, Boolean forceIncludeDescriptions, Boolean treatNullItemNumberSchemaAsInvalid, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToGaebValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationGaebType, targetExchangePhaseTransform, enforceStrictOfferPhaseLongTextOutput, exportQuantityDetermination, removeUnprintableCharactersFromTexts, forceIncludeDescriptions, treatNullItemNumberSchemaAsInvalid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToOenorm
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToOenormCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/oenorm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationOenormType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationOenormType", destinationOenormType));
        if (tryRepairProjectStructure != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryRepairProjectStructure", tryRepairProjectStructure));
        if (skipTryEnforceSchemaCompliantXmlOutput != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SkipTryEnforceSchemaCompliantXmlOutput", skipTryEnforceSchemaCompliantXmlOutput));
        if (removeUnprintableCharactersFromTexts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("RemoveUnprintableCharactersFromTexts", removeUnprintableCharactersFromTexts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToOenormValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToOenorm(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToOenormCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to Oenorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToOenorm(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToOenormWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to Oenorm
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToOenormWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToOenormValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to Oenorm (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationOenormType Defaults to Lv2015 (optional)
     * @param tryRepairProjectStructure Defaults to false. If this is enabled, the converter will try to ensure that the project structure can be mapped to Oenorm. It might introduce additional group levels to ensure a compatible target (optional)
     * @param skipTryEnforceSchemaCompliantXmlOutput If this option is enabled, AVACloud will not attempt to force a schema-compliant Xml output for ÖNorm targets that are Xml based. By default, AVACloud will try to add required fields, even if no data is present, with sensible defaults. This behavior can be disabled with this option. (optional)
     * @param removeUnprintableCharactersFromTexts If this is enabled, unprintable characters are removed from text elements. Otherwise, the conversion might fail in case some text content contains characters that are not allowed in XML output formats. Defaults to true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToOenormAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationOenormType, Boolean tryRepairProjectStructure, Boolean skipTryEnforceSchemaCompliantXmlOutput, Boolean removeUnprintableCharactersFromTexts, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToOenormValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationOenormType, tryRepairProjectStructure, skipTryEnforceSchemaCompliantXmlOutput, removeUnprintableCharactersFromTexts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToReb
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToRebCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/reb";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (destinationRebType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DestinationRebType", destinationRebType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToRebValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToReb(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToRebCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to REB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToReb(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToRebWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to REB
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToRebWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToRebValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to REB (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param destinationRebType Defaults to D11 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToRebAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String destinationRebType, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToRebValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, destinationRebType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToSia
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToSiaCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/sia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToSiaValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToSia(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToSiaCall(avaProject, tryAutoGenerateItemNumbersAndSchema, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to SIA 451
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToSia(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToSiaWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to SIA 451
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToSiaWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToSiaValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to SIA 451 (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToSiaAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToSiaValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for avaConversionConvertToUgl
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToUglCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = avaProject;

        // create path and map variables
        String localVarPath = "/conversion/ava/ugl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tryAutoGenerateItemNumbersAndSchema != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("TryAutoGenerateItemNumbersAndSchema", tryAutoGenerateItemNumbersAndSchema));
        if (uglDestinationVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UglDestinationVersion", uglDestinationVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/problem+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Dangl.Identity" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call avaConversionConvertToUglValidateBeforeCall(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'avaProject' is set
        if (avaProject == null) {
            throw new ApiException("Missing the required parameter 'avaProject' when calling avaConversionConvertToUgl(Async)");
        }
        

        com.squareup.okhttp.Call call = avaConversionConvertToUglCall(avaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Converts Dangl.AVA projects to UGL
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File avaConversionConvertToUgl(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion) throws ApiException {
        ApiResponse<File> resp = avaConversionConvertToUglWithHttpInfo(avaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion);
        return resp.getData();
    }

    /**
     * Converts Dangl.AVA projects to UGL
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> avaConversionConvertToUglWithHttpInfo(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion) throws ApiException {
        com.squareup.okhttp.Call call = avaConversionConvertToUglValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Converts Dangl.AVA projects to UGL (asynchronously)
     * 
     * @param avaProject The Dangl.AVA project (required)
     * @param tryAutoGenerateItemNumbersAndSchema If this is set to true, AVACloud will try to generate item numbers and an item number schema automatically for the input project. The operation will not have any effect if either an item number schema is already present, or if any of the elements already has an item number. (optional)
     * @param uglDestinationVersion The UGL version to convert to. Defaults to V1. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call avaConversionConvertToUglAsync(ProjectDto avaProject, Boolean tryAutoGenerateItemNumbersAndSchema, String uglDestinationVersion, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = avaConversionConvertToUglValidateBeforeCall(avaProject, tryAutoGenerateItemNumbersAndSchema, uglDestinationVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
