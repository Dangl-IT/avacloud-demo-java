/*
 * AVACloud API 1.59.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.59.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Price details about a line item
 */
@ApiModel(description = "Price details about a line item")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-09T18:36:39.750Z")
public class LineItemPriceDetail {
  @SerializedName("netPrice")
  private BigDecimal netPrice = null;

  @SerializedName("absoluteDiscountPerItem")
  private BigDecimal absoluteDiscountPerItem = null;

  @SerializedName("grossPrice")
  private BigDecimal grossPrice = null;

  @SerializedName("baseQuantity")
  private BigDecimal baseQuantity = null;

  @SerializedName("baseQuantityUnitCode")
  private String baseQuantityUnitCode = null;

  public LineItemPriceDetail netPrice(BigDecimal netPrice) {
    this.netPrice = netPrice;
    return this;
  }

   /**
   * The net price of this line item. This is the unit price
   * @return netPrice
  **/
  @ApiModelProperty(value = "The net price of this line item. This is the unit price")
  public BigDecimal getNetPrice() {
    return netPrice;
  }

  public void setNetPrice(BigDecimal netPrice) {
    this.netPrice = netPrice;
  }

  public LineItemPriceDetail absoluteDiscountPerItem(BigDecimal absoluteDiscountPerItem) {
    this.absoluteDiscountPerItem = absoluteDiscountPerItem;
    return this;
  }

   /**
   * A discount for this line item, given as an absolute value. It is essentially the difference between NetPrice (or the list price) and the actual invoiced price GrossPrice.
   * @return absoluteDiscountPerItem
  **/
  @ApiModelProperty(value = "A discount for this line item, given as an absolute value. It is essentially the difference between NetPrice (or the list price) and the actual invoiced price GrossPrice.")
  public BigDecimal getAbsoluteDiscountPerItem() {
    return absoluteDiscountPerItem;
  }

  public void setAbsoluteDiscountPerItem(BigDecimal absoluteDiscountPerItem) {
    this.absoluteDiscountPerItem = absoluteDiscountPerItem;
  }

  public LineItemPriceDetail grossPrice(BigDecimal grossPrice) {
    this.grossPrice = grossPrice;
    return this;
  }

   /**
   * The gross price of this line item, meaning the price without taxes that will be invoiced
   * @return grossPrice
  **/
  @ApiModelProperty(value = "The gross price of this line item, meaning the price without taxes that will be invoiced")
  public BigDecimal getGrossPrice() {
    return grossPrice;
  }

  public void setGrossPrice(BigDecimal grossPrice) {
    this.grossPrice = grossPrice;
  }

  public LineItemPriceDetail baseQuantity(BigDecimal baseQuantity) {
    this.baseQuantity = baseQuantity;
    return this;
  }

   /**
   * The quantity for which this price is valid. In combination with the NetPrice, you basically specify the denominator of the unit price for a line item.
   * @return baseQuantity
  **/
  @ApiModelProperty(value = "The quantity for which this price is valid. In combination with the NetPrice, you basically specify the denominator of the unit price for a line item.")
  public BigDecimal getBaseQuantity() {
    return baseQuantity;
  }

  public void setBaseQuantity(BigDecimal baseQuantity) {
    this.baseQuantity = baseQuantity;
  }

  public LineItemPriceDetail baseQuantityUnitCode(String baseQuantityUnitCode) {
    this.baseQuantityUnitCode = baseQuantityUnitCode;
    return this;
  }

   /**
   * A code representing the unit for the base quantity
   * @return baseQuantityUnitCode
  **/
  @ApiModelProperty(value = "A code representing the unit for the base quantity")
  public String getBaseQuantityUnitCode() {
    return baseQuantityUnitCode;
  }

  public void setBaseQuantityUnitCode(String baseQuantityUnitCode) {
    this.baseQuantityUnitCode = baseQuantityUnitCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemPriceDetail lineItemPriceDetail = (LineItemPriceDetail) o;
    return Objects.equals(this.netPrice, lineItemPriceDetail.netPrice) &&
        Objects.equals(this.absoluteDiscountPerItem, lineItemPriceDetail.absoluteDiscountPerItem) &&
        Objects.equals(this.grossPrice, lineItemPriceDetail.grossPrice) &&
        Objects.equals(this.baseQuantity, lineItemPriceDetail.baseQuantity) &&
        Objects.equals(this.baseQuantityUnitCode, lineItemPriceDetail.baseQuantityUnitCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(netPrice, absoluteDiscountPerItem, grossPrice, baseQuantity, baseQuantityUnitCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemPriceDetail {\n");
    
    sb.append("    netPrice: ").append(toIndentedString(netPrice)).append("\n");
    sb.append("    absoluteDiscountPerItem: ").append(toIndentedString(absoluteDiscountPerItem)).append("\n");
    sb.append("    grossPrice: ").append(toIndentedString(grossPrice)).append("\n");
    sb.append("    baseQuantity: ").append(toIndentedString(baseQuantity)).append("\n");
    sb.append("    baseQuantityUnitCode: ").append(toIndentedString(baseQuantityUnitCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

