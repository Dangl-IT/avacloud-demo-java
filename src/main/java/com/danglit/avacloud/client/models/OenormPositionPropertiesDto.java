/*
 * AVACloud API 1.41.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.OenormOriginCodeDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.
 */
@ApiModel(description = "This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-05-04T13:13:59.221Z")
public class OenormPositionPropertiesDto {
  @SerializedName("originCode")
  private OenormOriginCodeDto originCode = null;

  @SerializedName("openingTextIsFreeText")
  private Boolean openingTextIsFreeText = null;

  @SerializedName("isMainPosition")
  private Boolean isMainPosition = null;

  @SerializedName("isUndividedPosition")
  private Boolean isUndividedPosition = null;

  @SerializedName("oenormShortText")
  private String oenormShortText = null;

  @SerializedName("oenormShortTextAddition")
  private String oenormShortTextAddition = null;

  public OenormPositionPropertiesDto originCode(OenormOriginCodeDto originCode) {
    this.originCode = originCode;
    return this;
  }

   /**
   * This indicates where the content of this element originates, if set. It corresponds to &#39;herkunftskennzeichen&#39; in ÖNorm
   * @return originCode
  **/
  @ApiModelProperty(required = true, value = "This indicates where the content of this element originates, if set. It corresponds to 'herkunftskennzeichen' in ÖNorm")
  public OenormOriginCodeDto getOriginCode() {
    return originCode;
  }

  public void setOriginCode(OenormOriginCodeDto originCode) {
    this.originCode = originCode;
  }

  public OenormPositionPropertiesDto openingTextIsFreeText(Boolean openingTextIsFreeText) {
    this.openingTextIsFreeText = openingTextIsFreeText;
    return this;
  }

   /**
   * This marks if the opening texts within this element are considered free text. It corresponds to &#39;vorbemerkungskennzeichen&#39; in ÖNorm.
   * @return openingTextIsFreeText
  **/
  @ApiModelProperty(required = true, value = "This marks if the opening texts within this element are considered free text. It corresponds to 'vorbemerkungskennzeichen' in ÖNorm.")
  public Boolean isOpeningTextIsFreeText() {
    return openingTextIsFreeText;
  }

  public void setOpeningTextIsFreeText(Boolean openingTextIsFreeText) {
    this.openingTextIsFreeText = openingTextIsFreeText;
  }

  public OenormPositionPropertiesDto isMainPosition(Boolean isMainPosition) {
    this.isMainPosition = isMainPosition;
    return this;
  }

   /**
   * This indicates if the ÖNorm &#39;wesentliche position&#39; mark is set
   * @return isMainPosition
  **/
  @ApiModelProperty(required = true, value = "This indicates if the ÖNorm 'wesentliche position' mark is set")
  public Boolean isIsMainPosition() {
    return isMainPosition;
  }

  public void setIsMainPosition(Boolean isMainPosition) {
    this.isMainPosition = isMainPosition;
  }

  public OenormPositionPropertiesDto isUndividedPosition(Boolean isUndividedPosition) {
    this.isUndividedPosition = isUndividedPosition;
    return this;
  }

   /**
   * This indicates if the ÖNorm position was a &#39;ungeteilteposition&#39; (undivided position). This will only be taken into account when the position is also the sole element inside it&#39;s parent group
   * @return isUndividedPosition
  **/
  @ApiModelProperty(required = true, value = "This indicates if the ÖNorm position was a 'ungeteilteposition' (undivided position). This will only be taken into account when the position is also the sole element inside it's parent group")
  public Boolean isIsUndividedPosition() {
    return isUndividedPosition;
  }

  public void setIsUndividedPosition(Boolean isUndividedPosition) {
    this.isUndividedPosition = isUndividedPosition;
  }

  public OenormPositionPropertiesDto oenormShortText(String oenormShortText) {
    this.oenormShortText = oenormShortText;
    return this;
  }

   /**
   * In some ÖNorm formats, the short text can have it&#39;s own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText &#39; &#39; OenormShortTextAddition needs to match the ShortText.
   * @return oenormShortText
  **/
  @ApiModelProperty(value = "In some ÖNorm formats, the short text can have it's own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText ' ' OenormShortTextAddition needs to match the ShortText.")
  public String getOenormShortText() {
    return oenormShortText;
  }

  public void setOenormShortText(String oenormShortText) {
    this.oenormShortText = oenormShortText;
  }

  public OenormPositionPropertiesDto oenormShortTextAddition(String oenormShortTextAddition) {
    this.oenormShortTextAddition = oenormShortTextAddition;
    return this;
  }

   /**
   * In some ÖNorm formats, the short text can have it&#39;s own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText &#39; &#39; OenormShortTextAddition needs to match the ShortText.
   * @return oenormShortTextAddition
  **/
  @ApiModelProperty(value = "In some ÖNorm formats, the short text can have it's own addition, so the text is split up in OenormShortText and OenormShortTextAddition To serialize this, either the ShortText property of the parent position needs to be null, or OenormShortText ' ' OenormShortTextAddition needs to match the ShortText.")
  public String getOenormShortTextAddition() {
    return oenormShortTextAddition;
  }

  public void setOenormShortTextAddition(String oenormShortTextAddition) {
    this.oenormShortTextAddition = oenormShortTextAddition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OenormPositionPropertiesDto oenormPositionPropertiesDto = (OenormPositionPropertiesDto) o;
    return Objects.equals(this.originCode, oenormPositionPropertiesDto.originCode) &&
        Objects.equals(this.openingTextIsFreeText, oenormPositionPropertiesDto.openingTextIsFreeText) &&
        Objects.equals(this.isMainPosition, oenormPositionPropertiesDto.isMainPosition) &&
        Objects.equals(this.isUndividedPosition, oenormPositionPropertiesDto.isUndividedPosition) &&
        Objects.equals(this.oenormShortText, oenormPositionPropertiesDto.oenormShortText) &&
        Objects.equals(this.oenormShortTextAddition, oenormPositionPropertiesDto.oenormShortTextAddition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originCode, openingTextIsFreeText, isMainPosition, isUndividedPosition, oenormShortText, oenormShortTextAddition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OenormPositionPropertiesDto {\n");
    
    sb.append("    originCode: ").append(toIndentedString(originCode)).append("\n");
    sb.append("    openingTextIsFreeText: ").append(toIndentedString(openingTextIsFreeText)).append("\n");
    sb.append("    isMainPosition: ").append(toIndentedString(isMainPosition)).append("\n");
    sb.append("    isUndividedPosition: ").append(toIndentedString(isUndividedPosition)).append("\n");
    sb.append("    oenormShortText: ").append(toIndentedString(oenormShortText)).append("\n");
    sb.append("    oenormShortTextAddition: ").append(toIndentedString(oenormShortTextAddition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

