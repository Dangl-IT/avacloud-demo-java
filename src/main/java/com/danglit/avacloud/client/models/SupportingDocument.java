/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AttachmentMimeType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents a document / attachment that is included with the invoice
 */
@ApiModel(description = "Represents a document / attachment that is included with the invoice")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-02-11T12:55:14.413Z")
public class SupportingDocument {
  @SerializedName("documentReference")
  private String documentReference = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("externalDocumentUrl")
  private String externalDocumentUrl = null;

  @SerializedName("documentBase64")
  private String documentBase64 = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("documentMimeType")
  private AttachmentMimeType documentMimeType = null;

  public SupportingDocument documentReference(String documentReference) {
    this.documentReference = documentReference;
    return this;
  }

   /**
   * This is typically an id or a name
   * @return documentReference
  **/
  @ApiModelProperty(value = "This is typically an id or a name")
  public String getDocumentReference() {
    return documentReference;
  }

  public void setDocumentReference(String documentReference) {
    this.documentReference = documentReference;
  }

  public SupportingDocument description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the document
   * @return description
  **/
  @ApiModelProperty(value = "A description of the document")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public SupportingDocument externalDocumentUrl(String externalDocumentUrl) {
    this.externalDocumentUrl = externalDocumentUrl;
    return this;
  }

   /**
   * A link to the document in case this is an external reference
   * @return externalDocumentUrl
  **/
  @ApiModelProperty(value = "A link to the document in case this is an external reference")
  public String getExternalDocumentUrl() {
    return externalDocumentUrl;
  }

  public void setExternalDocumentUrl(String externalDocumentUrl) {
    this.externalDocumentUrl = externalDocumentUrl;
  }

  public SupportingDocument documentBase64(String documentBase64) {
    this.documentBase64 = documentBase64;
    return this;
  }

   /**
   * The document in base64 encoded form as binary data
   * @return documentBase64
  **/
  @ApiModelProperty(value = "The document in base64 encoded form as binary data")
  public String getDocumentBase64() {
    return documentBase64;
  }

  public void setDocumentBase64(String documentBase64) {
    this.documentBase64 = documentBase64;
  }

  public SupportingDocument fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * This should be present if DocumentBase64 is set.
   * @return fileName
  **/
  @ApiModelProperty(value = "This should be present if DocumentBase64 is set.")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public SupportingDocument documentMimeType(AttachmentMimeType documentMimeType) {
    this.documentMimeType = documentMimeType;
    return this;
  }

   /**
   * The type of the document
   * @return documentMimeType
  **/
  @ApiModelProperty(required = true, value = "The type of the document")
  public AttachmentMimeType getDocumentMimeType() {
    return documentMimeType;
  }

  public void setDocumentMimeType(AttachmentMimeType documentMimeType) {
    this.documentMimeType = documentMimeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportingDocument supportingDocument = (SupportingDocument) o;
    return Objects.equals(this.documentReference, supportingDocument.documentReference) &&
        Objects.equals(this.description, supportingDocument.description) &&
        Objects.equals(this.externalDocumentUrl, supportingDocument.externalDocumentUrl) &&
        Objects.equals(this.documentBase64, supportingDocument.documentBase64) &&
        Objects.equals(this.fileName, supportingDocument.fileName) &&
        Objects.equals(this.documentMimeType, supportingDocument.documentMimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentReference, description, externalDocumentUrl, documentBase64, fileName, documentMimeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportingDocument {\n");
    
    sb.append("    documentReference: ").append(toIndentedString(documentReference)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    externalDocumentUrl: ").append(toIndentedString(externalDocumentUrl)).append("\n");
    sb.append("    documentBase64: ").append(toIndentedString(documentBase64)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    documentMimeType: ").append(toIndentedString(documentMimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

