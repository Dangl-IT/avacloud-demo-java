/*
 * AVACloud API 1.59.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.59.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.IElementDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This model contains a flattened represention of an AVA project, which
 */
@ApiModel(description = "This model contains a flattened represention of an AVA project, which")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-09T18:36:39.750Z")
public class FlatElementDto {
  @SerializedName("previousElementId")
  private String previousElementId = null;

  @SerializedName("parentElementId")
  private String parentElementId = null;

  @SerializedName("element")
  private IElementDto element = null;

  public FlatElementDto previousElementId(String previousElementId) {
    this.previousElementId = previousElementId;
    return this;
  }

   /**
   * If this is not null, then this contains the id of the previous element in the hierarchy on the same level.
   * @return previousElementId
  **/
  @ApiModelProperty(value = "If this is not null, then this contains the id of the previous element in the hierarchy on the same level.")
  public String getPreviousElementId() {
    return previousElementId;
  }

  public void setPreviousElementId(String previousElementId) {
    this.previousElementId = previousElementId;
  }

  public FlatElementDto parentElementId(String parentElementId) {
    this.parentElementId = parentElementId;
    return this;
  }

   /**
   * If this is not null, then this contains the id of the parent element.
   * @return parentElementId
  **/
  @ApiModelProperty(value = "If this is not null, then this contains the id of the parent element.")
  public String getParentElementId() {
    return parentElementId;
  }

  public void setParentElementId(String parentElementId) {
    this.parentElementId = parentElementId;
  }

  public FlatElementDto element(IElementDto element) {
    this.element = element;
    return this;
  }

   /**
   * The element itself.
   * @return element
  **/
  @ApiModelProperty(value = "The element itself.")
  public IElementDto getElement() {
    return element;
  }

  public void setElement(IElementDto element) {
    this.element = element;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlatElementDto flatElementDto = (FlatElementDto) o;
    return Objects.equals(this.previousElementId, flatElementDto.previousElementId) &&
        Objects.equals(this.parentElementId, flatElementDto.parentElementId) &&
        Objects.equals(this.element, flatElementDto.element);
  }

  @Override
  public int hashCode() {
    return Objects.hash(previousElementId, parentElementId, element);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlatElementDto {\n");
    
    sb.append("    previousElementId: ").append(toIndentedString(previousElementId)).append("\n");
    sb.append("    parentElementId: ").append(toIndentedString(parentElementId)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

