/*
 * AVACloud API 1.9.1
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AdditionTypeDto;
import com.danglit.avacloud.client.models.IElementDto;
import com.danglit.avacloud.client.models.StandardizedDescriptionDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NoteTextDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-27T19:12:20.812Z")
public class NoteTextDto extends IElementDto {
  @SerializedName("isOpeningText")
  private Boolean isOpeningText = null;

  @SerializedName("isClosingText")
  private Boolean isClosingText = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("additionType")
  private AdditionTypeDto additionType = null;

  @SerializedName("longText")
  private String longText = null;

  @SerializedName("htmlLongText")
  private String htmlLongText = null;

  @SerializedName("standardizedDescription")
  private StandardizedDescriptionDto standardizedDescription = null;

  @SerializedName("elementType")
  private String elementType = null;

  public NoteTextDto isOpeningText(Boolean isOpeningText) {
    this.isOpeningText = isOpeningText;
    return this;
  }

   /**
   * If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special opening text at the beginning of the project. For example, in GAEB XML, this would map to the GAEB.Award.AddText. Typically, such texts describe project-wide contractual definitions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.
   * @return isOpeningText
  **/
  @ApiModelProperty(required = true, value = "If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special opening text at the beginning of the project. For example, in GAEB XML, this would map to the GAEB.Award.AddText. Typically, such texts describe project-wide contractual definitions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.")
  public Boolean isIsOpeningText() {
    return isOpeningText;
  }

  public void setIsOpeningText(Boolean isOpeningText) {
    this.isOpeningText = isOpeningText;
  }

  public NoteTextDto isClosingText(Boolean isClosingText) {
    this.isClosingText = isClosingText;
    return this;
  }

   /**
   * If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special closing text at the end of the project. For Example, in GAEB XML, this would map to the GAEB.AddText. Typically, such texts are used to describe project wide finishing descriptions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.
   * @return isClosingText
  **/
  @ApiModelProperty(required = true, value = "If this is set to true, this text is meant to not be seen as part of the regular elements hierarchy but as a special closing text at the end of the project. For Example, in GAEB XML, this would map to the GAEB.AddText. Typically, such texts are used to describe project wide finishing descriptions. If this is set to true, this NoteText should be placed at the top of the elements hierarchy directly in the ServiceSpecification.Elements group, otherwise it will likely not be treated correctly when exporting to GAEB. You can only set IsOpeningText or IsClosingText to true.")
  public Boolean isIsClosingText() {
    return isClosingText;
  }

  public void setIsClosingText(Boolean isClosingText) {
    this.isClosingText = isClosingText;
  }

  public NoteTextDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Short description for this DescriptionBase element.
   * @return shortText
  **/
  @ApiModelProperty(value = "Short description for this DescriptionBase element.")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public NoteTextDto additionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
    return this;
  }

   /**
   * Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
   * @return additionType
  **/
  @ApiModelProperty(required = true, value = "Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.")
  public AdditionTypeDto getAdditionType() {
    return additionType;
  }

  public void setAdditionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
  }

  public NoteTextDto longText(String longText) {
    this.longText = longText;
    return this;
  }

   /**
   * Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
   * @return longText
  **/
  @ApiModelProperty(value = "Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.")
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }

  public NoteTextDto htmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
    return this;
  }

   /**
   * This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
   * @return htmlLongText
  **/
  @ApiModelProperty(value = "This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.")
  public String getHtmlLongText() {
    return htmlLongText;
  }

  public void setHtmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
  }

  public NoteTextDto standardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
    return this;
  }

   /**
   * This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
   * @return standardizedDescription
  **/
  @ApiModelProperty(value = "This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.")
  public StandardizedDescriptionDto getStandardizedDescription() {
    return standardizedDescription;
  }

  public void setStandardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
  }

  public NoteTextDto elementType(String elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public String getElementType() {
    return elementType;
  }

  public void setElementType(String elementType) {
    this.elementType = elementType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoteTextDto noteTextDto = (NoteTextDto) o;
    return Objects.equals(this.isOpeningText, noteTextDto.isOpeningText) &&
        Objects.equals(this.isClosingText, noteTextDto.isClosingText) &&
        Objects.equals(this.shortText, noteTextDto.shortText) &&
        Objects.equals(this.additionType, noteTextDto.additionType) &&
        Objects.equals(this.longText, noteTextDto.longText) &&
        Objects.equals(this.htmlLongText, noteTextDto.htmlLongText) &&
        Objects.equals(this.standardizedDescription, noteTextDto.standardizedDescription) &&
        Objects.equals(this.elementType, noteTextDto.elementType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isOpeningText, isClosingText, shortText, additionType, longText, htmlLongText, standardizedDescription, elementType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoteTextDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isOpeningText: ").append(toIndentedString(isOpeningText)).append("\n");
    sb.append("    isClosingText: ").append(toIndentedString(isClosingText)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    additionType: ").append(toIndentedString(additionType)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    htmlLongText: ").append(toIndentedString(htmlLongText)).append("\n");
    sb.append("    standardizedDescription: ").append(toIndentedString(standardizedDescription)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

