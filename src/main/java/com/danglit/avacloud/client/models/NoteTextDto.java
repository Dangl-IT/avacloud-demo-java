/*
 * AVACloud API 1.4.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AdditionTypeDto;
import com.danglit.avacloud.client.models.IElementDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NoteTextDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-02T22:46:57.991Z")
public class NoteTextDto extends IElementDto {
  @SerializedName("isOpeningText")
  private Boolean isOpeningText = null;

  @SerializedName("isClosingText")
  private Boolean isClosingText = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("additionType")
  private AdditionTypeDto additionType = null;

  @SerializedName("longText")
  private String longText = null;

  @SerializedName("htmlLongText")
  private String htmlLongText = null;

  @SerializedName("elementType")
  private String elementType = null;

  public NoteTextDto isOpeningText(Boolean isOpeningText) {
    this.isOpeningText = isOpeningText;
    return this;
  }

   /**
   * Get isOpeningText
   * @return isOpeningText
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isIsOpeningText() {
    return isOpeningText;
  }

  public void setIsOpeningText(Boolean isOpeningText) {
    this.isOpeningText = isOpeningText;
  }

  public NoteTextDto isClosingText(Boolean isClosingText) {
    this.isClosingText = isClosingText;
    return this;
  }

   /**
   * Get isClosingText
   * @return isClosingText
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isIsClosingText() {
    return isClosingText;
  }

  public void setIsClosingText(Boolean isClosingText) {
    this.isClosingText = isClosingText;
  }

  public NoteTextDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Get shortText
   * @return shortText
  **/
  @ApiModelProperty(value = "")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public NoteTextDto additionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
    return this;
  }

   /**
   * Get additionType
   * @return additionType
  **/
  @ApiModelProperty(required = true, value = "")
  public AdditionTypeDto getAdditionType() {
    return additionType;
  }

  public void setAdditionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
  }

  public NoteTextDto longText(String longText) {
    this.longText = longText;
    return this;
  }

   /**
   * Get longText
   * @return longText
  **/
  @ApiModelProperty(value = "")
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }

  public NoteTextDto htmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
    return this;
  }

   /**
   * Get htmlLongText
   * @return htmlLongText
  **/
  @ApiModelProperty(value = "")
  public String getHtmlLongText() {
    return htmlLongText;
  }

  public void setHtmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
  }

  public NoteTextDto elementType(String elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public String getElementType() {
    return elementType;
  }

  public void setElementType(String elementType) {
    this.elementType = elementType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoteTextDto noteTextDto = (NoteTextDto) o;
    return Objects.equals(this.isOpeningText, noteTextDto.isOpeningText) &&
        Objects.equals(this.isClosingText, noteTextDto.isClosingText) &&
        Objects.equals(this.shortText, noteTextDto.shortText) &&
        Objects.equals(this.additionType, noteTextDto.additionType) &&
        Objects.equals(this.longText, noteTextDto.longText) &&
        Objects.equals(this.htmlLongText, noteTextDto.htmlLongText) &&
        Objects.equals(this.elementType, noteTextDto.elementType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isOpeningText, isClosingText, shortText, additionType, longText, htmlLongText, elementType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoteTextDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    isOpeningText: ").append(toIndentedString(isOpeningText)).append("\n");
    sb.append("    isClosingText: ").append(toIndentedString(isClosingText)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    additionType: ").append(toIndentedString(additionType)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    htmlLongText: ").append(toIndentedString(htmlLongText)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

