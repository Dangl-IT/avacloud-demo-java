/*
 * AVACloud API 1.41.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.41.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * This enumeration describes the type of a catalogue. Catalogues, or collections, hold information to categorize and describe items. For example, the German DIN 276 cost group standards describe different types of costs for building projects. When referencing the DIN 276 catalogue and providing an item key or identifier, it is possible to reference data in this catalogue.
 */
@JsonAdapter(CatalogueTypeDto.Adapter.class)
public enum CatalogueTypeDto {
  
  UNKNOWN("Unknown"),
  
  LOCATION("Location"),
  
  DIN276("DIN276"),
  
  COSTUNIT("CostUnit"),
  
  WORKCATEGORY("WorkCategory"),
  
  OENORMB1801COSTGROUP("OenormB1801CostGroup"),
  
  BIM("BIM");

  private String value;

  CatalogueTypeDto(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CatalogueTypeDto fromValue(String text) {
    for (CatalogueTypeDto b : CatalogueTypeDto.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<CatalogueTypeDto> {
    @Override
    public void write(final JsonWriter jsonWriter, final CatalogueTypeDto enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CatalogueTypeDto read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CatalogueTypeDto.fromValue(String.valueOf(value));
    }
  }
}

