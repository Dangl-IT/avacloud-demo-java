/*
 * AVACloud API 1.59.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.59.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Type specifying the identification of an allowance from UNTDID 5189. See this list: https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred5189.htm
 */
@JsonAdapter(AllowanceReasonType.Adapter.class)
public enum AllowanceReasonType {
  
  HANDLINGCOMMISSION("HandlingCommission"),
  
  AMENDMENTCOMMISSION("AmendmentCommission"),
  
  ACCEPTANCECOMMISSION("AcceptanceCommission"),
  
  COMMISSIONFOROBTAININGACCEPTANCE("CommissionForObtainingAcceptance"),
  
  COMMISSIONONDELIVERY("CommissionOnDelivery"),
  
  ADVISINGCOMMISSION("AdvisingCommission"),
  
  CONFIRMATIONCOMMISSION("ConfirmationCommission"),
  
  DEFERREDPAYMENTCOMMISSION("DeferredPaymentCommission"),
  
  COMMISSIONFORTAKINGUPDOCUMENTS("CommissionForTakingUpDocuments"),
  
  OPENINGCOMMISSION("OpeningCommission"),
  
  FEEFORPAYMENTUNDERRESERVE("FeeForPaymentUnderReserve"),
  
  DISCREPANCYFEE("DiscrepancyFee"),
  
  DOMICILATIONCOMMISSION("DomicilationCommission"),
  
  COMMISSIONFORRELEASEOFGOODS("CommissionForReleaseOfGoods"),
  
  COLLECTIONCOMMISSION("CollectionCommission"),
  
  NEGOTIATIONCOMMISSION("NegotiationCommission"),
  
  RETURNCOMMISSION("ReturnCommission"),
  
  BLSPLITTINGCHARGES("BLSplittingCharges"),
  
  TRUSTCOMMISSION("TrustCommission"),
  
  TRANSFERCOMMISSION("TransferCommission"),
  
  COMMISSIONFOROPENINGIRREVOCABLEDOCUMENTARYCREDITS("CommissionForOpeningIrrevocableDocumentaryCredits"),
  
  PREADVICECOMMISSION("PreAdviceCommission"),
  
  SUPERVISORYCOMMISSION("SupervisoryCommission"),
  
  MODELCHARGES("ModelCharges"),
  
  RISKCOMMISSION("RiskCommission"),
  
  GUARANTEECOMMISSION("GuaranteeCommission"),
  
  REIMBURSEMENTCOMMISSION("ReimbursementCommission"),
  
  STAMPDUTY("StampDuty"),
  
  BROKERAGE("Brokerage"),
  
  BANKCHARGES("BankCharges"),
  
  BANKCHARGESINFORMATION("BankChargesInformation"),
  
  COURIERFEE("CourierFee"),
  
  PHONEFEE("PhoneFee"),
  
  POSTAGEFEE("PostageFee"),
  
  SWIFTFEE("SWIFTFee"),
  
  TELEXFEE("TelexFee"),
  
  PENALTYFORLATEDELIVERYOFDOCUMENTS("PenaltyForLateDeliveryOfDocuments"),
  
  PENALTYFORLATEDELIVERYOFVALUATIONOFWORKS("PenaltyForLateDeliveryOfValuationOfWorks"),
  
  PENALTYFOREXECUTIONOFWORKSBEHINDSCHEDULE("PenaltyForExecutionOfWorksBehindSchedule"),
  
  OTHERPENALTIES("OtherPenalties"),
  
  BONUSFORWORKSAHEADOFSCHEDULE("BonusForWorksAheadOfSchedule"),
  
  OTHERBONUS("OtherBonus"),
  
  PROJECTMANAGEMENTCOST("ProjectManagementCost"),
  
  PRORATARETENTION("ProRataRetention"),
  
  CONTRACTUALRETENTION("ContractualRetention"),
  
  OTHERRETENTIONS("OtherRetentions"),
  
  INTERESTONARREARS("InterestOnArrears"),
  
  INTEREST("Interest"),
  
  CHARGEPERCREDITCOVER("ChargePerCreditCover"),
  
  CHARGEPERUNUSEDCREDITCOVER("ChargePerUnusedCreditCover"),
  
  MINIMUMCOMMISSION("MinimumCommission"),
  
  FACTORINGCOMMISSION("FactoringCommission"),
  
  CHAMBEROFCOMMERCECHARGE("ChamberOfCommerceCharge"),
  
  TRANSFERCHARGES("TransferCharges"),
  
  REPATRIATIONCHARGES("RepatriationCharges"),
  
  MISCELLANEOUSCHARGES("MiscellaneousCharges"),
  
  FOREIGNEXCHANGECHARGES("ForeignExchangeCharges"),
  
  AGREEDDEBITINTERESTCHARGE("AgreedDebitInterestCharge"),
  
  MANUFACTURERSCONSUMERDISCOUNT("ManufacturersConsumerDiscount"),
  
  FAXADVICECHARGE("FaxAdviceCharge"),
  
  DUETOMILITARYSTATUS("DueToMilitaryStatus"),
  
  DUETOWORKACCIDENT("DueToWorkAccident"),
  
  SPECIALAGREEMENT("SpecialAgreement"),
  
  PRODUCTIONERRORDISCOUNT("ProductionErrorDiscount"),
  
  NEWOUTLETDISCOUNT("NewOutletDiscount"),
  
  SAMPLEDISCOUNT("SampleDiscount"),
  
  ENDOFRANGEDISCOUNT("EndOfRangeDiscount"),
  
  CHARGEFORACUSTOMERSPECIFICFINISH("ChargeForACustomerSpecificFinish"),
  
  INCOTERMDISCOUNT("IncotermDiscount"),
  
  POINTOFSALESTHRESHOLDALLOWANCE("PointOfSalesThresholdAllowance"),
  
  TECHNICALMODIFICATIONCOSTS("TechnicalModificationCosts"),
  
  JOBORDERPRODUCTIONCOSTS("JobOrderProductionCosts"),
  
  OFFPREMISESCOSTS("OffPremisesCosts"),
  
  ADDITIONALPROCESSINGCOSTS("AdditionalProcessingCosts"),
  
  ATTESTINGCHARGE("AttestingCharge"),
  
  RUSHDELIVERYSURCHARGE("RushDeliverySurcharge"),
  
  SPECIALCONSTRUCTIONCOSTS("SpecialConstructionCosts"),
  
  FREIGHTCHARGES("FreightCharges"),
  
  PACKINGCHARGE("PackingCharge"),
  
  REPAIRCHARGE("RepairCharge"),
  
  LOADINGCHARGE("LoadingCharge"),
  
  SETUPCHARGE("SetupCharge"),
  
  TESTINGCHARGE("TestingCharge"),
  
  WAREHOUSINGCHARGE("WarehousingCharge"),
  
  GOLDSURCHARGE("GoldSurcharge"),
  
  COPPERSURCHARGE("CopperSurcharge"),
  
  MATERIALSURCHARGEDEDUCTION("MaterialSurchargeDeduction"),
  
  LEADSURCHARGE("LeadSurcharge"),
  
  PRICEINDEXSURCHARGE("PriceIndexSurcharge"),
  
  PLATINUMSURCHARGE("PlatinumSurcharge"),
  
  SILVERSURCHARGE("SilverSurcharge"),
  
  WOLFRAMSURCHARGE("WolframSurcharge"),
  
  ALUMINUMSURCHARGE("AluminumSurcharge"),
  
  DISCOUNT("Discount"),
  
  INSURANCE("Insurance"),
  
  MINIMUMORDERMINIMUMBILLINGCHARGE("MinimumOrderMinimumBillingCharge"),
  
  MATERIALSURCHARGESPECIALMATERIALS("MaterialSurchargeSpecialMaterials"),
  
  SURCHARGE("Surcharge"),
  
  SPECIALREBATE("SpecialRebate"),
  
  CARBONFOOTPRINTCHARGE("CarbonFootprintCharge"),
  
  FIXEDLONGTERM("FixedLongTerm"),
  
  TEMPORARY("Temporary"),
  
  STANDARD("Standard"),
  
  YEARLYTURNOVER("YearlyTurnover");

  private String value;

  AllowanceReasonType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AllowanceReasonType fromValue(String text) {
    for (AllowanceReasonType b : AllowanceReasonType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<AllowanceReasonType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AllowanceReasonType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AllowanceReasonType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AllowanceReasonType.fromValue(String.valueOf(value));
    }
  }
}

