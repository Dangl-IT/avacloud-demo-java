/*
 * AVACloud API 1.9.1
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.ComissionStatusDto;
import com.danglit.avacloud.client.models.GrossPriceComponentDto;
import com.danglit.avacloud.client.models.IElementDto;
import com.danglit.avacloud.client.models.ItemNumberDto;
import com.danglit.avacloud.client.models.ItemNumberSchemaDto;
import com.danglit.avacloud.client.models.PriceTypeDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * ServiceSpecificationGroupDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-27T19:12:20.812Z")
public class ServiceSpecificationGroupDto extends IElementDto {
  @SerializedName("projectHourlyWage")
  private BigDecimal projectHourlyWage = null;

  @SerializedName("projectTaxRate")
  private BigDecimal projectTaxRate = null;

  @SerializedName("projectPriceComponents")
  private List<String> projectPriceComponents = null;

  @SerializedName("projectItemNumberSchema")
  private ItemNumberSchemaDto projectItemNumberSchema = null;

  @SerializedName("elements")
  private List<IElementDto> elements = null;

  @SerializedName("projectLabourTimeLabel")
  private String projectLabourTimeLabel = null;

  @SerializedName("containsDuplicateItemNumbers")
  private Boolean containsDuplicateItemNumbers = null;

  @SerializedName("ignoreDuplicateItemNumbers")
  private Boolean ignoreDuplicateItemNumbers = null;

  @SerializedName("totalPriceGrossByTaxRate")
  private List<GrossPriceComponentDto> totalPriceGrossByTaxRate = null;

  @SerializedName("ignoreChildPriceUpdates")
  private Boolean ignoreChildPriceUpdates = null;

  @SerializedName("deductedPrice")
  private BigDecimal deductedPrice = null;

  @SerializedName("deductionFactor")
  private BigDecimal deductionFactor = null;

  @SerializedName("totalPrice")
  private BigDecimal totalPrice = null;

  @SerializedName("totalPriceGross")
  private BigDecimal totalPriceGross = null;

  @SerializedName("totalPriceGrossDeducted")
  private BigDecimal totalPriceGrossDeducted = null;

  @SerializedName("priceType")
  private PriceTypeDto priceType = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("comissionStatus")
  private ComissionStatusDto comissionStatus = null;

  @SerializedName("itemNumber")
  private ItemNumberDto itemNumber = null;

  @SerializedName("elementType")
  private String elementType = null;

  @SerializedName("isLot")
  private Boolean isLot = null;

  @SerializedName("alternativeTo")
  private String alternativeTo = null;

  @SerializedName("type")
  private String type = null;

   /**
   * The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.
   * @return projectHourlyWage
  **/
  @ApiModelProperty(required = true, value = "The hourly wage that is used within this ElementContainerBase. Will be propagated to child elements.")
  public BigDecimal getProjectHourlyWage() {
    return projectHourlyWage;
  }

  public ServiceSpecificationGroupDto projectTaxRate(BigDecimal projectTaxRate) {
    this.projectTaxRate = projectTaxRate;
    return this;
  }

   /**
   * The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.
   * @return projectTaxRate
  **/
  @ApiModelProperty(required = true, value = "The tax rate that is used within this ElementContainerBase. Will be propagated to child elements.")
  public BigDecimal getProjectTaxRate() {
    return projectTaxRate;
  }

  public void setProjectTaxRate(BigDecimal projectTaxRate) {
    this.projectTaxRate = projectTaxRate;
  }

  public ServiceSpecificationGroupDto projectPriceComponents(List<String> projectPriceComponents) {
    this.projectPriceComponents = projectPriceComponents;
    return this;
  }

  public ServiceSpecificationGroupDto addProjectPriceComponentsItem(String projectPriceComponentsItem) {
    if (this.projectPriceComponents == null) {
      this.projectPriceComponents = new ArrayList<>();
    }
    this.projectPriceComponents.add(projectPriceComponentsItem);
    return this;
  }

   /**
   * The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.
   * @return projectPriceComponents
  **/
  @ApiModelProperty(value = "The price components that are used within this project. They are ignored during Json deserialization because they will be set from the parent project.")
  public List<String> getProjectPriceComponents() {
    return projectPriceComponents;
  }

  public void setProjectPriceComponents(List<String> projectPriceComponents) {
    this.projectPriceComponents = projectPriceComponents;
  }

  public ServiceSpecificationGroupDto projectItemNumberSchema(ItemNumberSchemaDto projectItemNumberSchema) {
    this.projectItemNumberSchema = projectItemNumberSchema;
    return this;
  }

   /**
   * The ItemNumberSchema that is used within this project.
   * @return projectItemNumberSchema
  **/
  @ApiModelProperty(value = "The ItemNumberSchema that is used within this project.")
  public ItemNumberSchemaDto getProjectItemNumberSchema() {
    return projectItemNumberSchema;
  }

  public void setProjectItemNumberSchema(ItemNumberSchemaDto projectItemNumberSchema) {
    this.projectItemNumberSchema = projectItemNumberSchema;
  }

  public ServiceSpecificationGroupDto elements(List<IElementDto> elements) {
    this.elements = elements;
    return this;
  }

  public ServiceSpecificationGroupDto addElementsItem(IElementDto elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

   /**
   * The IElements within this ElementContainerBase.
   * @return elements
  **/
  @ApiModelProperty(value = "The IElements within this ElementContainerBase.")
  public List<IElementDto> getElements() {
    return elements;
  }

  public void setElements(List<IElementDto> elements) {
    this.elements = elements;
  }

   /**
   * The label used in the parent Project to mark labour time, e.g. \&quot;Hours\&quot; or \&quot;Stunden\&quot;.
   * @return projectLabourTimeLabel
  **/
  @ApiModelProperty(value = "The label used in the parent Project to mark labour time, e.g. \"Hours\" or \"Stunden\".")
  public String getProjectLabourTimeLabel() {
    return projectLabourTimeLabel;
  }

   /**
   * Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.
   * @return containsDuplicateItemNumbers
  **/
  @ApiModelProperty(required = true, value = "Indicates if there are child IElements that have conflicting, duplicated ItemNumbers or if any child ElementContainerBase elements themselves contain duplicate ItemNumber s. Will always indicate false when told to ignore duplicate item numbers.")
  public Boolean isContainsDuplicateItemNumbers() {
    return containsDuplicateItemNumbers;
  }

  public ServiceSpecificationGroupDto ignoreDuplicateItemNumbers(Boolean ignoreDuplicateItemNumbers) {
    this.ignoreDuplicateItemNumbers = ignoreDuplicateItemNumbers;
    return this;
  }

   /**
   * Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.
   * @return ignoreDuplicateItemNumbers
  **/
  @ApiModelProperty(required = true, value = "Indicate if duplicated ItemNumbers within child elements are to be ignored. Will not perform checks for duplicates if yes.")
  public Boolean isIgnoreDuplicateItemNumbers() {
    return ignoreDuplicateItemNumbers;
  }

  public void setIgnoreDuplicateItemNumbers(Boolean ignoreDuplicateItemNumbers) {
    this.ignoreDuplicateItemNumbers = ignoreDuplicateItemNumbers;
  }

  public ServiceSpecificationGroupDto totalPriceGrossByTaxRate(List<GrossPriceComponentDto> totalPriceGrossByTaxRate) {
    this.totalPriceGrossByTaxRate = totalPriceGrossByTaxRate;
    return this;
  }

  public ServiceSpecificationGroupDto addTotalPriceGrossByTaxRateItem(GrossPriceComponentDto totalPriceGrossByTaxRateItem) {
    if (this.totalPriceGrossByTaxRate == null) {
      this.totalPriceGrossByTaxRate = new ArrayList<>();
    }
    this.totalPriceGrossByTaxRate.add(totalPriceGrossByTaxRateItem);
    return this;
  }

   /**
   * Price composition by tax rate.
   * @return totalPriceGrossByTaxRate
  **/
  @ApiModelProperty(value = "Price composition by tax rate.")
  public List<GrossPriceComponentDto> getTotalPriceGrossByTaxRate() {
    return totalPriceGrossByTaxRate;
  }

  public void setTotalPriceGrossByTaxRate(List<GrossPriceComponentDto> totalPriceGrossByTaxRate) {
    this.totalPriceGrossByTaxRate = totalPriceGrossByTaxRate;
  }

  public ServiceSpecificationGroupDto ignoreChildPriceUpdates(Boolean ignoreChildPriceUpdates) {
    this.ignoreChildPriceUpdates = ignoreChildPriceUpdates;
    return this;
  }

   /**
   * Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.
   * @return ignoreChildPriceUpdates
  **/
  @ApiModelProperty(required = true, value = "Internally used to indicate that a propagation is currently done, this is done to not recalculate every single result from a lot of changes when it is sufficient to calculate the total price at once.")
  public Boolean isIgnoreChildPriceUpdates() {
    return ignoreChildPriceUpdates;
  }

  public void setIgnoreChildPriceUpdates(Boolean ignoreChildPriceUpdates) {
    this.ignoreChildPriceUpdates = ignoreChildPriceUpdates;
  }

   /**
   * Net price after applied deductions.
   * @return deductedPrice
  **/
  @ApiModelProperty(required = true, value = "Net price after applied deductions.")
  public BigDecimal getDeductedPrice() {
    return deductedPrice;
  }

  public ServiceSpecificationGroupDto deductionFactor(BigDecimal deductionFactor) {
    this.deductionFactor = deductionFactor;
    return this;
  }

   /**
   * Factor of applied deductions to the total price. For example, \&quot;0.03\&quot; means that a 3% deduction is to be applied.
   * @return deductionFactor
  **/
  @ApiModelProperty(required = true, value = "Factor of applied deductions to the total price. For example, \"0.03\" means that a 3% deduction is to be applied.")
  public BigDecimal getDeductionFactor() {
    return deductionFactor;
  }

  public void setDeductionFactor(BigDecimal deductionFactor) {
    this.deductionFactor = deductionFactor;
  }

   /**
   * Will return this ElementContainerBase&#39;s total price.
   * @return totalPrice
  **/
  @ApiModelProperty(required = true, value = "Will return this ElementContainerBase's total price.")
  public BigDecimal getTotalPrice() {
    return totalPrice;
  }

   /**
   * The total gross price for this ElementContainerBase including all child elements.
   * @return totalPriceGross
  **/
  @ApiModelProperty(required = true, value = "The total gross price for this ElementContainerBase including all child elements.")
  public BigDecimal getTotalPriceGross() {
    return totalPriceGross;
  }

   /**
   * Total gross price after applied deductions.
   * @return totalPriceGrossDeducted
  **/
  @ApiModelProperty(required = true, value = "Total gross price after applied deductions.")
  public BigDecimal getTotalPriceGrossDeducted() {
    return totalPriceGrossDeducted;
  }

  public ServiceSpecificationGroupDto priceType(PriceTypeDto priceType) {
    this.priceType = priceType;
    return this;
  }

   /**
   * Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.
   * @return priceType
  **/
  @ApiModelProperty(required = true, value = "Indicates the PriceType of this ElementContainerBase, whether it should factor into total costs or not.")
  public PriceTypeDto getPriceType() {
    return priceType;
  }

  public void setPriceType(PriceTypeDto priceType) {
    this.priceType = priceType;
  }

  public ServiceSpecificationGroupDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Description for this ServiceSpecificationGroup.
   * @return shortText
  **/
  @ApiModelProperty(value = "Description for this ServiceSpecificationGroup.")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public ServiceSpecificationGroupDto comissionStatus(ComissionStatusDto comissionStatus) {
    this.comissionStatus = comissionStatus;
    return this;
  }

   /**
   * Indicates if this service specification group is commissioned (and therefore should be executed), postponed for later or undefined.
   * @return comissionStatus
  **/
  @ApiModelProperty(required = true, value = "Indicates if this service specification group is commissioned (and therefore should be executed), postponed for later or undefined.")
  public ComissionStatusDto getComissionStatus() {
    return comissionStatus;
  }

  public void setComissionStatus(ComissionStatusDto comissionStatus) {
    this.comissionStatus = comissionStatus;
  }

  public ServiceSpecificationGroupDto itemNumber(ItemNumberDto itemNumber) {
    this.itemNumber = itemNumber;
    return this;
  }

   /**
   * The ItemNumber for this INumberedElement interface.
   * @return itemNumber
  **/
  @ApiModelProperty(value = "The ItemNumber for this INumberedElement interface.")
  public ItemNumberDto getItemNumber() {
    return itemNumber;
  }

  public void setItemNumber(ItemNumberDto itemNumber) {
    this.itemNumber = itemNumber;
  }

  public ServiceSpecificationGroupDto elementType(String elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public String getElementType() {
    return elementType;
  }

  public void setElementType(String elementType) {
    this.elementType = elementType;
  }

   /**
   * This indicates if this group is the parent of a lot. See the documentation for more information about working with lots.
   * @return isLot
  **/
  @ApiModelProperty(required = true, value = "This indicates if this group is the parent of a lot. See the documentation for more information about working with lots.")
  public Boolean isIsLot() {
    return isLot;
  }

  public ServiceSpecificationGroupDto alternativeTo(String alternativeTo) {
    this.alternativeTo = alternativeTo;
    return this;
  }

   /**
   * If this group is an alternative for a base group, then this property should point to the id of the group in this service specification that it can replace. If this is an alternative group to a base group, the PriceType should typically be set to \&quot;WithoutTotal\&quot; so this group does not factor into total costs. The PriceType is not changed when this property is set
   * @return alternativeTo
  **/
  @ApiModelProperty(value = "If this group is an alternative for a base group, then this property should point to the id of the group in this service specification that it can replace. If this is an alternative group to a base group, the PriceType should typically be set to \"WithoutTotal\" so this group does not factor into total costs. The PriceType is not changed when this property is set")
  public String getAlternativeTo() {
    return alternativeTo;
  }

  public void setAlternativeTo(String alternativeTo) {
    this.alternativeTo = alternativeTo;
  }

  public ServiceSpecificationGroupDto type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceSpecificationGroupDto serviceSpecificationGroupDto = (ServiceSpecificationGroupDto) o;
    return Objects.equals(this.projectHourlyWage, serviceSpecificationGroupDto.projectHourlyWage) &&
        Objects.equals(this.projectTaxRate, serviceSpecificationGroupDto.projectTaxRate) &&
        Objects.equals(this.projectPriceComponents, serviceSpecificationGroupDto.projectPriceComponents) &&
        Objects.equals(this.projectItemNumberSchema, serviceSpecificationGroupDto.projectItemNumberSchema) &&
        Objects.equals(this.elements, serviceSpecificationGroupDto.elements) &&
        Objects.equals(this.projectLabourTimeLabel, serviceSpecificationGroupDto.projectLabourTimeLabel) &&
        Objects.equals(this.containsDuplicateItemNumbers, serviceSpecificationGroupDto.containsDuplicateItemNumbers) &&
        Objects.equals(this.ignoreDuplicateItemNumbers, serviceSpecificationGroupDto.ignoreDuplicateItemNumbers) &&
        Objects.equals(this.totalPriceGrossByTaxRate, serviceSpecificationGroupDto.totalPriceGrossByTaxRate) &&
        Objects.equals(this.ignoreChildPriceUpdates, serviceSpecificationGroupDto.ignoreChildPriceUpdates) &&
        Objects.equals(this.deductedPrice, serviceSpecificationGroupDto.deductedPrice) &&
        Objects.equals(this.deductionFactor, serviceSpecificationGroupDto.deductionFactor) &&
        Objects.equals(this.totalPrice, serviceSpecificationGroupDto.totalPrice) &&
        Objects.equals(this.totalPriceGross, serviceSpecificationGroupDto.totalPriceGross) &&
        Objects.equals(this.totalPriceGrossDeducted, serviceSpecificationGroupDto.totalPriceGrossDeducted) &&
        Objects.equals(this.priceType, serviceSpecificationGroupDto.priceType) &&
        Objects.equals(this.shortText, serviceSpecificationGroupDto.shortText) &&
        Objects.equals(this.comissionStatus, serviceSpecificationGroupDto.comissionStatus) &&
        Objects.equals(this.itemNumber, serviceSpecificationGroupDto.itemNumber) &&
        Objects.equals(this.elementType, serviceSpecificationGroupDto.elementType) &&
        Objects.equals(this.isLot, serviceSpecificationGroupDto.isLot) &&
        Objects.equals(this.alternativeTo, serviceSpecificationGroupDto.alternativeTo) &&
        Objects.equals(this.type, serviceSpecificationGroupDto.type) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectHourlyWage, projectTaxRate, projectPriceComponents, projectItemNumberSchema, elements, projectLabourTimeLabel, containsDuplicateItemNumbers, ignoreDuplicateItemNumbers, totalPriceGrossByTaxRate, ignoreChildPriceUpdates, deductedPrice, deductionFactor, totalPrice, totalPriceGross, totalPriceGrossDeducted, priceType, shortText, comissionStatus, itemNumber, elementType, isLot, alternativeTo, type, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceSpecificationGroupDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    projectHourlyWage: ").append(toIndentedString(projectHourlyWage)).append("\n");
    sb.append("    projectTaxRate: ").append(toIndentedString(projectTaxRate)).append("\n");
    sb.append("    projectPriceComponents: ").append(toIndentedString(projectPriceComponents)).append("\n");
    sb.append("    projectItemNumberSchema: ").append(toIndentedString(projectItemNumberSchema)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    projectLabourTimeLabel: ").append(toIndentedString(projectLabourTimeLabel)).append("\n");
    sb.append("    containsDuplicateItemNumbers: ").append(toIndentedString(containsDuplicateItemNumbers)).append("\n");
    sb.append("    ignoreDuplicateItemNumbers: ").append(toIndentedString(ignoreDuplicateItemNumbers)).append("\n");
    sb.append("    totalPriceGrossByTaxRate: ").append(toIndentedString(totalPriceGrossByTaxRate)).append("\n");
    sb.append("    ignoreChildPriceUpdates: ").append(toIndentedString(ignoreChildPriceUpdates)).append("\n");
    sb.append("    deductedPrice: ").append(toIndentedString(deductedPrice)).append("\n");
    sb.append("    deductionFactor: ").append(toIndentedString(deductionFactor)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    totalPriceGross: ").append(toIndentedString(totalPriceGross)).append("\n");
    sb.append("    totalPriceGrossDeducted: ").append(toIndentedString(totalPriceGrossDeducted)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    comissionStatus: ").append(toIndentedString(comissionStatus)).append("\n");
    sb.append("    itemNumber: ").append(toIndentedString(itemNumber)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    isLot: ").append(toIndentedString(isLot)).append("\n");
    sb.append("    alternativeTo: ").append(toIndentedString(alternativeTo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

