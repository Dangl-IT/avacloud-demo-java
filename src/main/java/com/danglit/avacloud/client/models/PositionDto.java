/*
 * AVACloud API 1.59.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.59.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AddendumStatusDto;
import com.danglit.avacloud.client.models.AdditionTypeDto;
import com.danglit.avacloud.client.models.CalculationDto;
import com.danglit.avacloud.client.models.CatalogueDto;
import com.danglit.avacloud.client.models.CatalogueReferenceDto;
import com.danglit.avacloud.client.models.ComissionStatusDto;
import com.danglit.avacloud.client.models.CommercePropertiesDto;
import com.danglit.avacloud.client.models.ComplementedByQuantityDto;
import com.danglit.avacloud.client.models.IElementDto;
import com.danglit.avacloud.client.models.ItemNumberDto;
import com.danglit.avacloud.client.models.LabourPriceComponentDto;
import com.danglit.avacloud.client.models.OenormPositionPropertiesDto;
import com.danglit.avacloud.client.models.PositionComplementingTypeDto;
import com.danglit.avacloud.client.models.PositionHoldOutPropertiesDto;
import com.danglit.avacloud.client.models.PositionTypeDto;
import com.danglit.avacloud.client.models.PriceCatalogueDataDto;
import com.danglit.avacloud.client.models.PriceComponentDto;
import com.danglit.avacloud.client.models.PriceTypeDto;
import com.danglit.avacloud.client.models.ProductDataDto;
import com.danglit.avacloud.client.models.QuantityAssignmentDto;
import com.danglit.avacloud.client.models.ServiceTypeDto;
import com.danglit.avacloud.client.models.StandardizedDescriptionDto;
import com.danglit.avacloud.client.models.SubDescriptionDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * PositionDto
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-09T18:36:39.750Z")
public class PositionDto extends IElementDto {
  @SerializedName("unitPrice")
  private BigDecimal unitPrice = null;

  @SerializedName("unitPriceOverride")
  private BigDecimal unitPriceOverride = null;

  @SerializedName("quantity")
  private BigDecimal quantity = null;

  @SerializedName("quantityOverride")
  private BigDecimal quantityOverride = null;

  @SerializedName("isComplementingPosition")
  private Boolean isComplementingPosition = null;

  @SerializedName("complementsPositions")
  private List<String> complementsPositions = null;

  @SerializedName("complementingPricePercentageOverride")
  private BigDecimal complementingPricePercentageOverride = null;

  @SerializedName("complementingPricePercentage")
  private BigDecimal complementingPricePercentage = null;

  @SerializedName("unitTag")
  private String unitTag = null;

  @SerializedName("labourComponents")
  private LabourPriceComponentDto labourComponents = null;

  @SerializedName("priceComponents")
  private List<PriceComponentDto> priceComponents = null;

  @SerializedName("quantityComponents")
  private List<CalculationDto> quantityComponents = null;

  @SerializedName("subDescriptions")
  private List<SubDescriptionDto> subDescriptions = null;

  @SerializedName("comissionStatus")
  private ComissionStatusDto comissionStatus = null;

  @SerializedName("complementedBy")
  private List<String> complementedBy = null;

  @SerializedName("complemented")
  private Boolean complemented = null;

  @SerializedName("amountToBeEnteredByBidder")
  private Boolean amountToBeEnteredByBidder = null;

  @SerializedName("priceCompositionRequired")
  private Boolean priceCompositionRequired = null;

  @SerializedName("useDifferentTaxRate")
  private Boolean useDifferentTaxRate = null;

  @SerializedName("taxRate")
  private BigDecimal taxRate = null;

  @SerializedName("itemNumber")
  private ItemNumberDto itemNumber = null;

  @SerializedName("deductionFactor")
  private BigDecimal deductionFactor = null;

  @SerializedName("totalPrice")
  private BigDecimal totalPrice = null;

  @SerializedName("totalPriceGross")
  private BigDecimal totalPriceGross = null;

  @SerializedName("totalPriceGrossDeducted")
  private BigDecimal totalPriceGrossDeducted = null;

  @SerializedName("deductedPrice")
  private BigDecimal deductedPrice = null;

  @SerializedName("positionType")
  private PositionTypeDto positionType = null;

  @SerializedName("priceType")
  private PriceTypeDto priceType = null;

  @SerializedName("serviceType")
  private ServiceTypeDto serviceType = null;

  @SerializedName("productData")
  private ProductDataDto productData = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("longText")
  private String longText = null;

  @SerializedName("htmlLongText")
  private String htmlLongText = null;

  @SerializedName("additionType")
  private AdditionTypeDto additionType = null;

  @SerializedName("elementType")
  private String elementType = null;

  @SerializedName("quantityAssignments")
  private List<QuantityAssignmentDto> quantityAssignments = null;

  @SerializedName("commerceProperties")
  private CommercePropertiesDto commerceProperties = null;

  @SerializedName("alternativeTo")
  private String alternativeTo = null;

  @SerializedName("alternativeIdentifier")
  private Integer alternativeIdentifier = null;

  @SerializedName("alternativeGroupIdentifier")
  private Integer alternativeGroupIdentifier = null;

  @SerializedName("isLumpSum")
  private Boolean isLumpSum = null;

  @SerializedName("repetitionTo")
  private String repetitionTo = null;

  @SerializedName("standardizedDescription")
  private StandardizedDescriptionDto standardizedDescription = null;

  @SerializedName("complementedByQuantities")
  private List<ComplementedByQuantityDto> complementedByQuantities = null;

  @SerializedName("executionDescriptionReference")
  private String executionDescriptionReference = null;

  @SerializedName("notOffered")
  private Boolean notOffered = null;

  @SerializedName("oenormPositionProperties")
  private OenormPositionPropertiesDto oenormPositionProperties = null;

  @SerializedName("descriptionId")
  private String descriptionId = null;

  @SerializedName("hierarchyLevel")
  private Integer hierarchyLevel = null;

  @SerializedName("addendumStatus")
  private AddendumStatusDto addendumStatus = null;

  @SerializedName("hasBidderCommentInHtmlLongText")
  private Boolean hasBidderCommentInHtmlLongText = null;

  @SerializedName("gaebComplementingType")
  private PositionComplementingTypeDto gaebComplementingType = null;

  @SerializedName("holdOutProperties")
  private PositionHoldOutPropertiesDto holdOutProperties = null;

  @SerializedName("estimatedQuantity")
  private BigDecimal estimatedQuantity = null;

  @SerializedName("priceCatalogueData")
  private PriceCatalogueDataDto priceCatalogueData = null;

  @SerializedName("ignoreProjectCataloguePropagation")
  private Boolean ignoreProjectCataloguePropagation = null;

   /**
   * Will return the price per unit, rounded according to the project settings or the default value of three decimal places
   * @return unitPrice
  **/
  @ApiModelProperty(required = true, value = "Will return the price per unit, rounded according to the project settings or the default value of three decimal places")
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public PositionDto unitPriceOverride(BigDecimal unitPriceOverride) {
    this.unitPriceOverride = unitPriceOverride;
    return this;
  }

   /**
   * You can use this property to directly set the unit price for this position. This will override any given PriceComponents
   * @return unitPriceOverride
  **/
  @ApiModelProperty(value = "You can use this property to directly set the unit price for this position. This will override any given PriceComponents")
  public BigDecimal getUnitPriceOverride() {
    return unitPriceOverride;
  }

  public void setUnitPriceOverride(BigDecimal unitPriceOverride) {
    this.unitPriceOverride = unitPriceOverride;
  }

   /**
   * Will return this Position&#39;s total quantity, rounded to three decimal places.
   * @return quantity
  **/
  @ApiModelProperty(required = true, value = "Will return this Position's total quantity, rounded to three decimal places.")
  public BigDecimal getQuantity() {
    return quantity;
  }

  public PositionDto quantityOverride(BigDecimal quantityOverride) {
    this.quantityOverride = quantityOverride;
    return this;
  }

   /**
   * You can use this property to directly set the quantity for this position. This will override any given QuantityComponents
   * @return quantityOverride
  **/
  @ApiModelProperty(value = "You can use this property to directly set the quantity for this position. This will override any given QuantityComponents")
  public BigDecimal getQuantityOverride() {
    return quantityOverride;
  }

  public void setQuantityOverride(BigDecimal quantityOverride) {
    this.quantityOverride = quantityOverride;
  }

  public PositionDto isComplementingPosition(Boolean isComplementingPosition) {
    this.isComplementingPosition = isComplementingPosition;
    return this;
  }

   /**
   * This indicates true if this specific position is specified as a complementing position for any base position.
   * @return isComplementingPosition
  **/
  @ApiModelProperty(required = true, value = "This indicates true if this specific position is specified as a complementing position for any base position.")
  public Boolean isIsComplementingPosition() {
    return isComplementingPosition;
  }

  public void setIsComplementingPosition(Boolean isComplementingPosition) {
    this.isComplementingPosition = isComplementingPosition;
  }

  public PositionDto complementsPositions(List<String> complementsPositions) {
    this.complementsPositions = complementsPositions;
    return this;
  }

  public PositionDto addComplementsPositionsItem(String complementsPositionsItem) {
    if (this.complementsPositions == null) {
      this.complementsPositions = new ArrayList<>();
    }
    this.complementsPositions.add(complementsPositionsItem);
    return this;
  }

   /**
   * If IsComplementingPosition is set to true, this will indicate which base positions are targeted by this complementing position.
   * @return complementsPositions
  **/
  @ApiModelProperty(value = "If IsComplementingPosition is set to true, this will indicate which base positions are targeted by this complementing position.")
  public List<String> getComplementsPositions() {
    return complementsPositions;
  }

  public void setComplementsPositions(List<String> complementsPositions) {
    this.complementsPositions = complementsPositions;
  }

  public PositionDto complementingPricePercentageOverride(BigDecimal complementingPricePercentageOverride) {
    this.complementingPricePercentageOverride = complementingPricePercentageOverride;
    return this;
  }

   /**
   * You can use this property to directly specify the total price of this position as a percentage of the sum of the total prices of base positions that this position complements. It will essentially set the total price for this position to the sum of all total prices of the positions specified in ComplementsPositions multiplied by the percentage here. If present, this has precedence over UnitPriceOverride as well as QuantityOverride.
   * @return complementingPricePercentageOverride
  **/
  @ApiModelProperty(value = "You can use this property to directly specify the total price of this position as a percentage of the sum of the total prices of base positions that this position complements. It will essentially set the total price for this position to the sum of all total prices of the positions specified in ComplementsPositions multiplied by the percentage here. If present, this has precedence over UnitPriceOverride as well as QuantityOverride.")
  public BigDecimal getComplementingPricePercentageOverride() {
    return complementingPricePercentageOverride;
  }

  public void setComplementingPricePercentageOverride(BigDecimal complementingPricePercentageOverride) {
    this.complementingPricePercentageOverride = complementingPricePercentageOverride;
  }

  public PositionDto complementingPricePercentage(BigDecimal complementingPricePercentage) {
    this.complementingPricePercentage = complementingPricePercentage;
    return this;
  }

   /**
   * This is a read only property showing the total price of this positions as a percentage of the sum of the total prices of all base positions, in case this position is a complementing positions. If this position is not a complementing position, this will be null. Also, if no prices are present, this will also be null.
   * @return complementingPricePercentage
  **/
  @ApiModelProperty(value = "This is a read only property showing the total price of this positions as a percentage of the sum of the total prices of all base positions, in case this position is a complementing positions. If this position is not a complementing position, this will be null. Also, if no prices are present, this will also be null.")
  public BigDecimal getComplementingPricePercentage() {
    return complementingPricePercentage;
  }

  public void setComplementingPricePercentage(BigDecimal complementingPricePercentage) {
    this.complementingPricePercentage = complementingPricePercentage;
  }

  public PositionDto unitTag(String unitTag) {
    this.unitTag = unitTag;
    return this;
  }

   /**
   * The tag of the unit used for this positions quantity.
   * @return unitTag
  **/
  @ApiModelProperty(value = "The tag of the unit used for this positions quantity.")
  public String getUnitTag() {
    return unitTag;
  }

  public void setUnitTag(String unitTag) {
    this.unitTag = unitTag;
  }

  public PositionDto labourComponents(LabourPriceComponentDto labourComponents) {
    this.labourComponents = labourComponents;
    return this;
  }

   /**
   * The components for labour time in this Position.
   * @return labourComponents
  **/
  @ApiModelProperty(value = "The components for labour time in this Position.")
  public LabourPriceComponentDto getLabourComponents() {
    return labourComponents;
  }

  public void setLabourComponents(LabourPriceComponentDto labourComponents) {
    this.labourComponents = labourComponents;
  }

  public PositionDto priceComponents(List<PriceComponentDto> priceComponents) {
    this.priceComponents = priceComponents;
    return this;
  }

  public PositionDto addPriceComponentsItem(PriceComponentDto priceComponentsItem) {
    if (this.priceComponents == null) {
      this.priceComponents = new ArrayList<>();
    }
    this.priceComponents.add(priceComponentsItem);
    return this;
  }

   /**
   * The single price components in this Position. Price components should not be handled directly on a per-position basis but set globally in the parent Projects ProjectInformation.
   * @return priceComponents
  **/
  @ApiModelProperty(value = "The single price components in this Position. Price components should not be handled directly on a per-position basis but set globally in the parent Projects ProjectInformation.")
  public List<PriceComponentDto> getPriceComponents() {
    return priceComponents;
  }

  public void setPriceComponents(List<PriceComponentDto> priceComponents) {
    this.priceComponents = priceComponents;
  }

  public PositionDto quantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
    return this;
  }

  public PositionDto addQuantityComponentsItem(CalculationDto quantityComponentsItem) {
    if (this.quantityComponents == null) {
      this.quantityComponents = new ArrayList<>();
    }
    this.quantityComponents.add(quantityComponentsItem);
    return this;
  }

   /**
   * The quantity components of this Position.
   * @return quantityComponents
  **/
  @ApiModelProperty(value = "The quantity components of this Position.")
  public List<CalculationDto> getQuantityComponents() {
    return quantityComponents;
  }

  public void setQuantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
  }

  public PositionDto subDescriptions(List<SubDescriptionDto> subDescriptions) {
    this.subDescriptions = subDescriptions;
    return this;
  }

  public PositionDto addSubDescriptionsItem(SubDescriptionDto subDescriptionsItem) {
    if (this.subDescriptions == null) {
      this.subDescriptions = new ArrayList<>();
    }
    this.subDescriptions.add(subDescriptionsItem);
    return this;
  }

   /**
   * Further structuring of this Position.
   * @return subDescriptions
  **/
  @ApiModelProperty(value = "Further structuring of this Position.")
  public List<SubDescriptionDto> getSubDescriptions() {
    return subDescriptions;
  }

  public void setSubDescriptions(List<SubDescriptionDto> subDescriptions) {
    this.subDescriptions = subDescriptions;
  }

  public PositionDto comissionStatus(ComissionStatusDto comissionStatus) {
    this.comissionStatus = comissionStatus;
    return this;
  }

   /**
   * Indicates the status of this Position&#39;s comission.
   * @return comissionStatus
  **/
  @ApiModelProperty(required = true, value = "Indicates the status of this Position's comission.")
  public ComissionStatusDto getComissionStatus() {
    return comissionStatus;
  }

  public void setComissionStatus(ComissionStatusDto comissionStatus) {
    this.comissionStatus = comissionStatus;
  }

  public PositionDto complementedBy(List<String> complementedBy) {
    this.complementedBy = complementedBy;
    return this;
  }

  public PositionDto addComplementedByItem(String complementedByItem) {
    if (this.complementedBy == null) {
      this.complementedBy = new ArrayList<>();
    }
    this.complementedBy.add(complementedByItem);
    return this;
  }

   /**
   * A list of positions that complement this Position. The positions are referenced by their GUIDs. It might be used together with ComplementedByQuantities in case that only a given quantity is complemented by positions.
   * @return complementedBy
  **/
  @ApiModelProperty(value = "A list of positions that complement this Position. The positions are referenced by their GUIDs. It might be used together with ComplementedByQuantities in case that only a given quantity is complemented by positions.")
  public List<String> getComplementedBy() {
    return complementedBy;
  }

  public void setComplementedBy(List<String> complementedBy) {
    this.complementedBy = complementedBy;
  }

  public PositionDto complemented(Boolean complemented) {
    this.complemented = complemented;
    return this;
  }

   /**
   * Will indicate if this Position is complemented in this ServiceSpecification by other Positions. It can not be set to false when there are entries in the ComplementedBy property.
   * @return complemented
  **/
  @ApiModelProperty(required = true, value = "Will indicate if this Position is complemented in this ServiceSpecification by other Positions. It can not be set to false when there are entries in the ComplementedBy property.")
  public Boolean isComplemented() {
    return complemented;
  }

  public void setComplemented(Boolean complemented) {
    this.complemented = complemented;
  }

  public PositionDto amountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
    return this;
  }

   /**
   * Indicates that the amount for this Position is to be set by the bidder.
   * @return amountToBeEnteredByBidder
  **/
  @ApiModelProperty(required = true, value = "Indicates that the amount for this Position is to be set by the bidder.")
  public Boolean isAmountToBeEnteredByBidder() {
    return amountToBeEnteredByBidder;
  }

  public void setAmountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
  }

  public PositionDto priceCompositionRequired(Boolean priceCompositionRequired) {
    this.priceCompositionRequired = priceCompositionRequired;
    return this;
  }

   /**
   * Indicates if the bidder demands for prices to be broken up into their price components.
   * @return priceCompositionRequired
  **/
  @ApiModelProperty(required = true, value = "Indicates if the bidder demands for prices to be broken up into their price components.")
  public Boolean isPriceCompositionRequired() {
    return priceCompositionRequired;
  }

  public void setPriceCompositionRequired(Boolean priceCompositionRequired) {
    this.priceCompositionRequired = priceCompositionRequired;
  }

  public PositionDto useDifferentTaxRate(Boolean useDifferentTaxRate) {
    this.useDifferentTaxRate = useDifferentTaxRate;
    return this;
  }

   /**
   * Indicates if this Position should use a different TaxRate than what is the default for the Project.
   * @return useDifferentTaxRate
  **/
  @ApiModelProperty(required = true, value = "Indicates if this Position should use a different TaxRate than what is the default for the Project.")
  public Boolean isUseDifferentTaxRate() {
    return useDifferentTaxRate;
  }

  public void setUseDifferentTaxRate(Boolean useDifferentTaxRate) {
    this.useDifferentTaxRate = useDifferentTaxRate;
  }

  public PositionDto taxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Will return either the parent ServiceSpecification&#39;s TaxRate or it&#39;s own if it has a different value. (For example, in Germany Water has a different TaxRate than regular Positions)
   * @return taxRate
  **/
  @ApiModelProperty(required = true, value = "Will return either the parent ServiceSpecification's TaxRate or it's own if it has a different value. (For example, in Germany Water has a different TaxRate than regular Positions)")
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }

  public PositionDto itemNumber(ItemNumberDto itemNumber) {
    this.itemNumber = itemNumber;
    return this;
  }

   /**
   * The ItemNumber for this Position.
   * @return itemNumber
  **/
  @ApiModelProperty(value = "The ItemNumber for this Position.")
  public ItemNumberDto getItemNumber() {
    return itemNumber;
  }

  public void setItemNumber(ItemNumberDto itemNumber) {
    this.itemNumber = itemNumber;
  }

  public PositionDto deductionFactor(BigDecimal deductionFactor) {
    this.deductionFactor = deductionFactor;
    return this;
  }

   /**
   * The rate of deductions, i.e. 0.12m means 12% price deduction.
   * @return deductionFactor
  **/
  @ApiModelProperty(required = true, value = "The rate of deductions, i.e. 0.12m means 12% price deduction.")
  public BigDecimal getDeductionFactor() {
    return deductionFactor;
  }

  public void setDeductionFactor(BigDecimal deductionFactor) {
    this.deductionFactor = deductionFactor;
  }

   /**
   * Returns the product of UnitPrice times Quantity.
   * @return totalPrice
  **/
  @ApiModelProperty(required = true, value = "Returns the product of UnitPrice times Quantity.")
  public BigDecimal getTotalPrice() {
    return totalPrice;
  }

   /**
   * The total gross price for this Position.
   * @return totalPriceGross
  **/
  @ApiModelProperty(required = true, value = "The total gross price for this Position.")
  public BigDecimal getTotalPriceGross() {
    return totalPriceGross;
  }

   /**
   * Total gross price after applied deductions.
   * @return totalPriceGrossDeducted
  **/
  @ApiModelProperty(required = true, value = "Total gross price after applied deductions.")
  public BigDecimal getTotalPriceGrossDeducted() {
    return totalPriceGrossDeducted;
  }

   /**
   * Net price after applied deductions. Please be aware that this is the total price, from TotalPrice, not the unit price of the position.
   * @return deductedPrice
  **/
  @ApiModelProperty(required = true, value = "Net price after applied deductions. Please be aware that this is the total price, from TotalPrice, not the unit price of the position.")
  public BigDecimal getDeductedPrice() {
    return deductedPrice;
  }

  public PositionDto positionType(PositionTypeDto positionType) {
    this.positionType = positionType;
    return this;
  }

   /**
   * This indicates the type of a position. If this is an alternative position, its AlternativeTo property should be set to the id of the position it can replace.
   * @return positionType
  **/
  @ApiModelProperty(required = true, value = "This indicates the type of a position. If this is an alternative position, its AlternativeTo property should be set to the id of the position it can replace.")
  public PositionTypeDto getPositionType() {
    return positionType;
  }

  public void setPositionType(PositionTypeDto positionType) {
    this.positionType = positionType;
  }

  public PositionDto priceType(PriceTypeDto priceType) {
    this.priceType = priceType;
    return this;
  }

   /**
   * Indicates the PriceType of this Position.
   * @return priceType
  **/
  @ApiModelProperty(required = true, value = "Indicates the PriceType of this Position.")
  public PriceTypeDto getPriceType() {
    return priceType;
  }

  public void setPriceType(PriceTypeDto priceType) {
    this.priceType = priceType;
  }

  public PositionDto serviceType(ServiceTypeDto serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * This indicates if this position is regular or describing a labour / hourly paid work service
   * @return serviceType
  **/
  @ApiModelProperty(required = true, value = "This indicates if this position is regular or describing a labour / hourly paid work service")
  public ServiceTypeDto getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeDto serviceType) {
    this.serviceType = serviceType;
  }

  public PositionDto productData(ProductDataDto productData) {
    this.productData = productData;
    return this;
  }

   /**
   * This property describes additional information about a product being used within this Position. For example, a pipe position, per length unit, could be composed of different pipe segments, fitting and other accessory articles.
   * @return productData
  **/
  @ApiModelProperty(value = "This property describes additional information about a product being used within this Position. For example, a pipe position, per length unit, could be composed of different pipe segments, fitting and other accessory articles.")
  public ProductDataDto getProductData() {
    return productData;
  }

  public void setProductData(ProductDataDto productData) {
    this.productData = productData;
  }

  public PositionDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Short description for this DescriptionBase element.
   * @return shortText
  **/
  @ApiModelProperty(value = "Short description for this DescriptionBase element.")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public PositionDto longText(String longText) {
    this.longText = longText;
    return this;
  }

   /**
   * Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
   * @return longText
  **/
  @ApiModelProperty(value = "Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.")
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }

  public PositionDto htmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
    return this;
  }

   /**
   * This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
   * @return htmlLongText
  **/
  @ApiModelProperty(value = "This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.")
  public String getHtmlLongText() {
    return htmlLongText;
  }

  public void setHtmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
  }

  public PositionDto additionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
    return this;
  }

   /**
   * Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
   * @return additionType
  **/
  @ApiModelProperty(required = true, value = "Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.")
  public AdditionTypeDto getAdditionType() {
    return additionType;
  }

  public void setAdditionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
  }

  public PositionDto elementType(String elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public String getElementType() {
    return elementType;
  }

  public void setElementType(String elementType) {
    this.elementType = elementType;
  }

  public PositionDto quantityAssignments(List<QuantityAssignmentDto> quantityAssignments) {
    this.quantityAssignments = quantityAssignments;
    return this;
  }

  public PositionDto addQuantityAssignmentsItem(QuantityAssignmentDto quantityAssignmentsItem) {
    if (this.quantityAssignments == null) {
      this.quantityAssignments = new ArrayList<>();
    }
    this.quantityAssignments.add(quantityAssignmentsItem);
    return this;
  }

   /**
   * Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of this Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.
   * @return quantityAssignments
  **/
  @ApiModelProperty(value = "Quantity assignments are, in contrast to SubDescriptions, used to categorize parts of this Position. For example, it could be categorized by cost group - e.g. a Position describing concrete walls could follow the German DIN 276 Cost Groups Standard and specify that of the total 1.000m² wall, 500m² are classified as exterior walls and 500m² are classified as interior walls. They would then have different cost groups associated, e.g. for accounting purposes.")
  public List<QuantityAssignmentDto> getQuantityAssignments() {
    return quantityAssignments;
  }

  public void setQuantityAssignments(List<QuantityAssignmentDto> quantityAssignments) {
    this.quantityAssignments = quantityAssignments;
  }

  public PositionDto commerceProperties(CommercePropertiesDto commerceProperties) {
    this.commerceProperties = commerceProperties;
    return this;
  }

   /**
   * The CommerceProperties support specialized information that is only useful in GAEB XML 9x data exchange phases. It is intended to provide article information.
   * @return commerceProperties
  **/
  @ApiModelProperty(value = "The CommerceProperties support specialized information that is only useful in GAEB XML 9x data exchange phases. It is intended to provide article information.")
  public CommercePropertiesDto getCommerceProperties() {
    return commerceProperties;
  }

  public void setCommerceProperties(CommercePropertiesDto commerceProperties) {
    this.commerceProperties = commerceProperties;
  }

  public PositionDto alternativeTo(String alternativeTo) {
    this.alternativeTo = alternativeTo;
    return this;
  }

   /**
   * If this position is an Alternative, then this property should point to the id of the position in this service specification that it can replace. If this is set to a value, you can optionally also specify an identifier via AlternativeIdentifier to specifiy multiple positions that must be used together to be an alternative to a single base position.
   * @return alternativeTo
  **/
  @ApiModelProperty(value = "If this position is an Alternative, then this property should point to the id of the position in this service specification that it can replace. If this is set to a value, you can optionally also specify an identifier via AlternativeIdentifier to specifiy multiple positions that must be used together to be an alternative to a single base position.")
  public String getAlternativeTo() {
    return alternativeTo;
  }

  public void setAlternativeTo(String alternativeTo) {
    this.alternativeTo = alternativeTo;
  }

  public PositionDto alternativeIdentifier(Integer alternativeIdentifier) {
    this.alternativeIdentifier = alternativeIdentifier;
    return this;
  }

   /**
   * This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific position is assigned to. That way, if you specifiy multiple alternative Positions with the same AlternativeIdentifier, you can indicate that to replace a single base Position, multiple alternative Positions should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
   * @return alternativeIdentifier
  **/
  @ApiModelProperty(value = "This is an optional property that can be used together with AlternativeTo. If this is set, you can indicate which alternative group a specific position is assigned to. That way, if you specifiy multiple alternative Positions with the same AlternativeIdentifier, you can indicate that to replace a single base Position, multiple alternative Positions should be used. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.")
  public Integer getAlternativeIdentifier() {
    return alternativeIdentifier;
  }

  public void setAlternativeIdentifier(Integer alternativeIdentifier) {
    this.alternativeIdentifier = alternativeIdentifier;
  }

  public PositionDto alternativeGroupIdentifier(Integer alternativeGroupIdentifier) {
    this.alternativeGroupIdentifier = alternativeGroupIdentifier;
    return this;
  }

   /**
   * This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific position is assigned to. That way, you can specify the id (in integer format) for the alternative group this position belongs to. It&#39;s different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a position only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base position for a specific group. This was introduced in version v2.9.0 to be able to model both position and group ids for alternative group combinations. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.
   * @return alternativeGroupIdentifier
  **/
  @ApiModelProperty(value = "This is an optional property that can be used together with AlternativeTo and AlternativeGroupIdentifier. If this is set, you can indicate which alternative group a specific position is assigned to. That way, you can specify the id (in integer format) for the alternative group this position belongs to. It's different to AlternativeIdentifier in that the other property describes the id of the group, while this property here describes the group itself. If a position only has set AlternativeGroupIdentifier but not AlternativeIdentifier, then it likely is a base position for a specific group. This was introduced in version v2.9.0 to be able to model both position and group ids for alternative group combinations. This property is not checked or managed automatically, so it is possible for this property to become invalid, by for example setting this property but not setting a base position via AlternativeTo.")
  public Integer getAlternativeGroupIdentifier() {
    return alternativeGroupIdentifier;
  }

  public void setAlternativeGroupIdentifier(Integer alternativeGroupIdentifier) {
    this.alternativeGroupIdentifier = alternativeGroupIdentifier;
  }

  public PositionDto isLumpSum(Boolean isLumpSum) {
    this.isLumpSum = isLumpSum;
    return this;
  }

   /**
   * If this is true, it indicates that the position is intended to be a lump sum, \&quot;Pauschal\&quot; in German. This means the position total price that is being invoiced should not depend on the actual quantity. In practice, partial invoices are still often used for partial services rendered. This property does not affect the price calculation for this position. Typically, the Quantity should be set to 1.0 when this flag is used.
   * @return isLumpSum
  **/
  @ApiModelProperty(required = true, value = "If this is true, it indicates that the position is intended to be a lump sum, \"Pauschal\" in German. This means the position total price that is being invoiced should not depend on the actual quantity. In practice, partial invoices are still often used for partial services rendered. This property does not affect the price calculation for this position. Typically, the Quantity should be set to 1.0 when this flag is used.")
  public Boolean isIsLumpSum() {
    return isLumpSum;
  }

  public void setIsLumpSum(Boolean isLumpSum) {
    this.isLumpSum = isLumpSum;
  }

  public PositionDto repetitionTo(String repetitionTo) {
    this.repetitionTo = repetitionTo;
    return this;
  }

   /**
   * This identifier can be used to point to the Id of a position in the same ServiceSpecification that acts as a base position. It matches \&quot;Bezugsposition\&quot; in GAEB. This can be used for positions that repeat partially or are linked together
   * @return repetitionTo
  **/
  @ApiModelProperty(value = "This identifier can be used to point to the Id of a position in the same ServiceSpecification that acts as a base position. It matches \"Bezugsposition\" in GAEB. This can be used for positions that repeat partially or are linked together")
  public String getRepetitionTo() {
    return repetitionTo;
  }

  public void setRepetitionTo(String repetitionTo) {
    this.repetitionTo = repetitionTo;
  }

  public PositionDto standardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
    return this;
  }

   /**
   * This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
   * @return standardizedDescription
  **/
  @ApiModelProperty(value = "This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.")
  public StandardizedDescriptionDto getStandardizedDescription() {
    return standardizedDescription;
  }

  public void setStandardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
  }

  public PositionDto complementedByQuantities(List<ComplementedByQuantityDto> complementedByQuantities) {
    this.complementedByQuantities = complementedByQuantities;
    return this;
  }

  public PositionDto addComplementedByQuantitiesItem(ComplementedByQuantityDto complementedByQuantitiesItem) {
    if (this.complementedByQuantities == null) {
      this.complementedByQuantities = new ArrayList<>();
    }
    this.complementedByQuantities.add(complementedByQuantitiesItem);
    return this;
  }

   /**
   * This list contains references to positions that complement this one, additionally also specifying a quantity for which the addition is intended. This does not replace the ComplementedBy property and there are no automatic checks being done between these two properties, so it&#39;s up to the user code to ensure deletions (and additions, if desired) are performed for both properties. When copying withing keeping Ids, this list will not be part of the copy process, since it would only contain quantities without actual position references. Containers, however, will rebuild the list with updated position references when copying positions that contain entries here.
   * @return complementedByQuantities
  **/
  @ApiModelProperty(value = "This list contains references to positions that complement this one, additionally also specifying a quantity for which the addition is intended. This does not replace the ComplementedBy property and there are no automatic checks being done between these two properties, so it's up to the user code to ensure deletions (and additions, if desired) are performed for both properties. When copying withing keeping Ids, this list will not be part of the copy process, since it would only contain quantities without actual position references. Containers, however, will rebuild the list with updated position references when copying positions that contain entries here.")
  public List<ComplementedByQuantityDto> getComplementedByQuantities() {
    return complementedByQuantities;
  }

  public void setComplementedByQuantities(List<ComplementedByQuantityDto> complementedByQuantities) {
    this.complementedByQuantities = complementedByQuantities;
  }

  public PositionDto executionDescriptionReference(String executionDescriptionReference) {
    this.executionDescriptionReference = executionDescriptionReference;
    return this;
  }

   /**
   * This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions should be executed in practice. Often, the position itself still has text of its own to highlight deviations from that or add more details.
   * @return executionDescriptionReference
  **/
  @ApiModelProperty(value = "This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions should be executed in practice. Often, the position itself still has text of its own to highlight deviations from that or add more details.")
  public String getExecutionDescriptionReference() {
    return executionDescriptionReference;
  }

  public void setExecutionDescriptionReference(String executionDescriptionReference) {
    this.executionDescriptionReference = executionDescriptionReference;
  }

  public PositionDto notOffered(Boolean notOffered) {
    this.notOffered = notOffered;
    return this;
  }

   /**
   * This indicates if a position has not been offered. This is typically only expected to be true when the exchange phase of the parent ServiceSpecification is Offer, and it means that the position has not been offered at all.
   * @return notOffered
  **/
  @ApiModelProperty(required = true, value = "This indicates if a position has not been offered. This is typically only expected to be true when the exchange phase of the parent ServiceSpecification is Offer, and it means that the position has not been offered at all.")
  public Boolean isNotOffered() {
    return notOffered;
  }

  public void setNotOffered(Boolean notOffered) {
    this.notOffered = notOffered;
  }

  public PositionDto oenormPositionProperties(OenormPositionPropertiesDto oenormPositionProperties) {
    this.oenormPositionProperties = oenormPositionProperties;
    return this;
  }

   /**
   * This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.
   * @return oenormPositionProperties
  **/
  @ApiModelProperty(value = "This class models special properties that only apply to some exchange scenarios where ÖNorm is used. It is special for Positions and extends the OenormProperties base class.")
  public OenormPositionPropertiesDto getOenormPositionProperties() {
    return oenormPositionProperties;
  }

  public void setOenormPositionProperties(OenormPositionPropertiesDto oenormPositionProperties) {
    this.oenormPositionProperties = oenormPositionProperties;
  }

  public PositionDto descriptionId(String descriptionId) {
    this.descriptionId = descriptionId;
    return this;
  }

   /**
   * This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It&#39;s different to an elements identifier in that it should only apply to the description component, meaning the text itself.
   * @return descriptionId
  **/
  @ApiModelProperty(value = "This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.")
  public String getDescriptionId() {
    return descriptionId;
  }

  public void setDescriptionId(String descriptionId) {
    this.descriptionId = descriptionId;
  }

  public PositionDto hierarchyLevel(Integer hierarchyLevel) {
    this.hierarchyLevel = hierarchyLevel;
    return this;
  }

   /**
   * This is a zero based hierarchy level. It&#39;s set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.
   * @return hierarchyLevel
  **/
  @ApiModelProperty(required = true, value = "This is a zero based hierarchy level. It's set automatically when used in the context of a Project, and can be used to identify the hierarchy level of the current element.")
  public Integer getHierarchyLevel() {
    return hierarchyLevel;
  }

  public void setHierarchyLevel(Integer hierarchyLevel) {
    this.hierarchyLevel = hierarchyLevel;
  }

  public PositionDto addendumStatus(AddendumStatusDto addendumStatus) {
    this.addendumStatus = addendumStatus;
    return this;
  }

   /**
   * This indicates, if this element is part of an addendum an, if yes, with what status.
   * @return addendumStatus
  **/
  @ApiModelProperty(value = "This indicates, if this element is part of an addendum an, if yes, with what status.")
  public AddendumStatusDto getAddendumStatus() {
    return addendumStatus;
  }

  public void setAddendumStatus(AddendumStatusDto addendumStatus) {
    this.addendumStatus = addendumStatus;
  }

   /**
   * Get hasBidderCommentInHtmlLongText
   * @return hasBidderCommentInHtmlLongText
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isHasBidderCommentInHtmlLongText() {
    return hasBidderCommentInHtmlLongText;
  }

  public PositionDto gaebComplementingType(PositionComplementingTypeDto gaebComplementingType) {
    this.gaebComplementingType = gaebComplementingType;
    return this;
  }

   /**
   * This property can optionally be used in GAEB exchange scenarios. It is only meaningful if this position itself is a complementing position, meaning if this position is marked in other positions in their ComplementedBy list. Then, it specifies how the complementing should be expressed in GAEB. By default, positions are always explicitly referenced, but other options are possible. Please also note that the Dangl.AVA.Converter package, which is used for GAEB exports, will check if the given type is valid in the current project configuration. If not, directly referenced positions will be used as fallback.
   * @return gaebComplementingType
  **/
  @ApiModelProperty(required = true, value = "This property can optionally be used in GAEB exchange scenarios. It is only meaningful if this position itself is a complementing position, meaning if this position is marked in other positions in their ComplementedBy list. Then, it specifies how the complementing should be expressed in GAEB. By default, positions are always explicitly referenced, but other options are possible. Please also note that the Dangl.AVA.Converter package, which is used for GAEB exports, will check if the given type is valid in the current project configuration. If not, directly referenced positions will be used as fallback.")
  public PositionComplementingTypeDto getGaebComplementingType() {
    return gaebComplementingType;
  }

  public void setGaebComplementingType(PositionComplementingTypeDto gaebComplementingType) {
    this.gaebComplementingType = gaebComplementingType;
  }

  public PositionDto holdOutProperties(PositionHoldOutPropertiesDto holdOutProperties) {
    this.holdOutProperties = holdOutProperties;
    return this;
  }

   /**
   * HoldOut properties describe services that are to be provided and maintained for a specific time, e.g. fences on a construction site.
   * @return holdOutProperties
  **/
  @ApiModelProperty(value = "HoldOut properties describe services that are to be provided and maintained for a specific time, e.g. fences on a construction site.")
  public PositionHoldOutPropertiesDto getHoldOutProperties() {
    return holdOutProperties;
  }

  public void setHoldOutProperties(PositionHoldOutPropertiesDto holdOutProperties) {
    this.holdOutProperties = holdOutProperties;
  }

  public PositionDto estimatedQuantity(BigDecimal estimatedQuantity) {
    this.estimatedQuantity = estimatedQuantity;
    return this;
  }

   /**
   * This is an informational property, which directly holds a numerical value for an estimated quantity. It is not used for any price calculations.
   * @return estimatedQuantity
  **/
  @ApiModelProperty(value = "This is an informational property, which directly holds a numerical value for an estimated quantity. It is not used for any price calculations.")
  public BigDecimal getEstimatedQuantity() {
    return estimatedQuantity;
  }

  public void setEstimatedQuantity(BigDecimal estimatedQuantity) {
    this.estimatedQuantity = estimatedQuantity;
  }

  public PositionDto priceCatalogueData(PriceCatalogueDataDto priceCatalogueData) {
    this.priceCatalogueData = priceCatalogueData;
    return this;
  }

   /**
   * This is an optional property that holds price catalogue data. These are prices that may represent an estimate, and they typically come from a price catalogue.
   * @return priceCatalogueData
  **/
  @ApiModelProperty(value = "This is an optional property that holds price catalogue data. These are prices that may represent an estimate, and they typically come from a price catalogue.")
  public PriceCatalogueDataDto getPriceCatalogueData() {
    return priceCatalogueData;
  }

  public void setPriceCatalogueData(PriceCatalogueDataDto priceCatalogueData) {
    this.priceCatalogueData = priceCatalogueData;
  }

  public PositionDto ignoreProjectCataloguePropagation(Boolean ignoreProjectCataloguePropagation) {
    this.ignoreProjectCataloguePropagation = ignoreProjectCataloguePropagation;
    return this;
  }

   /**
   * If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties.
   * @return ignoreProjectCataloguePropagation
  **/
  @ApiModelProperty(required = true, value = "If this is set to true, the ProjectCatalogues property will not be propagated to child elements. This is useful in mapping scenarios, where you want to disable propagation for multiple changes, and only enable it once you have mapped all properties.")
  public Boolean isIgnoreProjectCataloguePropagation() {
    return ignoreProjectCataloguePropagation;
  }

  public void setIgnoreProjectCataloguePropagation(Boolean ignoreProjectCataloguePropagation) {
    this.ignoreProjectCataloguePropagation = ignoreProjectCataloguePropagation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PositionDto positionDto = (PositionDto) o;
    return Objects.equals(this.unitPrice, positionDto.unitPrice) &&
        Objects.equals(this.unitPriceOverride, positionDto.unitPriceOverride) &&
        Objects.equals(this.quantity, positionDto.quantity) &&
        Objects.equals(this.quantityOverride, positionDto.quantityOverride) &&
        Objects.equals(this.isComplementingPosition, positionDto.isComplementingPosition) &&
        Objects.equals(this.complementsPositions, positionDto.complementsPositions) &&
        Objects.equals(this.complementingPricePercentageOverride, positionDto.complementingPricePercentageOverride) &&
        Objects.equals(this.complementingPricePercentage, positionDto.complementingPricePercentage) &&
        Objects.equals(this.unitTag, positionDto.unitTag) &&
        Objects.equals(this.labourComponents, positionDto.labourComponents) &&
        Objects.equals(this.priceComponents, positionDto.priceComponents) &&
        Objects.equals(this.quantityComponents, positionDto.quantityComponents) &&
        Objects.equals(this.subDescriptions, positionDto.subDescriptions) &&
        Objects.equals(this.comissionStatus, positionDto.comissionStatus) &&
        Objects.equals(this.complementedBy, positionDto.complementedBy) &&
        Objects.equals(this.complemented, positionDto.complemented) &&
        Objects.equals(this.amountToBeEnteredByBidder, positionDto.amountToBeEnteredByBidder) &&
        Objects.equals(this.priceCompositionRequired, positionDto.priceCompositionRequired) &&
        Objects.equals(this.useDifferentTaxRate, positionDto.useDifferentTaxRate) &&
        Objects.equals(this.taxRate, positionDto.taxRate) &&
        Objects.equals(this.itemNumber, positionDto.itemNumber) &&
        Objects.equals(this.deductionFactor, positionDto.deductionFactor) &&
        Objects.equals(this.totalPrice, positionDto.totalPrice) &&
        Objects.equals(this.totalPriceGross, positionDto.totalPriceGross) &&
        Objects.equals(this.totalPriceGrossDeducted, positionDto.totalPriceGrossDeducted) &&
        Objects.equals(this.deductedPrice, positionDto.deductedPrice) &&
        Objects.equals(this.positionType, positionDto.positionType) &&
        Objects.equals(this.priceType, positionDto.priceType) &&
        Objects.equals(this.serviceType, positionDto.serviceType) &&
        Objects.equals(this.productData, positionDto.productData) &&
        Objects.equals(this.shortText, positionDto.shortText) &&
        Objects.equals(this.longText, positionDto.longText) &&
        Objects.equals(this.htmlLongText, positionDto.htmlLongText) &&
        Objects.equals(this.additionType, positionDto.additionType) &&
        Objects.equals(this.elementType, positionDto.elementType) &&
        Objects.equals(this.quantityAssignments, positionDto.quantityAssignments) &&
        Objects.equals(this.commerceProperties, positionDto.commerceProperties) &&
        Objects.equals(this.alternativeTo, positionDto.alternativeTo) &&
        Objects.equals(this.alternativeIdentifier, positionDto.alternativeIdentifier) &&
        Objects.equals(this.alternativeGroupIdentifier, positionDto.alternativeGroupIdentifier) &&
        Objects.equals(this.isLumpSum, positionDto.isLumpSum) &&
        Objects.equals(this.repetitionTo, positionDto.repetitionTo) &&
        Objects.equals(this.standardizedDescription, positionDto.standardizedDescription) &&
        Objects.equals(this.complementedByQuantities, positionDto.complementedByQuantities) &&
        Objects.equals(this.executionDescriptionReference, positionDto.executionDescriptionReference) &&
        Objects.equals(this.notOffered, positionDto.notOffered) &&
        Objects.equals(this.oenormPositionProperties, positionDto.oenormPositionProperties) &&
        Objects.equals(this.descriptionId, positionDto.descriptionId) &&
        Objects.equals(this.hierarchyLevel, positionDto.hierarchyLevel) &&
        Objects.equals(this.addendumStatus, positionDto.addendumStatus) &&
        Objects.equals(this.hasBidderCommentInHtmlLongText, positionDto.hasBidderCommentInHtmlLongText) &&
        Objects.equals(this.gaebComplementingType, positionDto.gaebComplementingType) &&
        Objects.equals(this.holdOutProperties, positionDto.holdOutProperties) &&
        Objects.equals(this.estimatedQuantity, positionDto.estimatedQuantity) &&
        Objects.equals(this.priceCatalogueData, positionDto.priceCatalogueData) &&
        Objects.equals(this.ignoreProjectCataloguePropagation, positionDto.ignoreProjectCataloguePropagation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitPrice, unitPriceOverride, quantity, quantityOverride, isComplementingPosition, complementsPositions, complementingPricePercentageOverride, complementingPricePercentage, unitTag, labourComponents, priceComponents, quantityComponents, subDescriptions, comissionStatus, complementedBy, complemented, amountToBeEnteredByBidder, priceCompositionRequired, useDifferentTaxRate, taxRate, itemNumber, deductionFactor, totalPrice, totalPriceGross, totalPriceGrossDeducted, deductedPrice, positionType, priceType, serviceType, productData, shortText, longText, htmlLongText, additionType, elementType, quantityAssignments, commerceProperties, alternativeTo, alternativeIdentifier, alternativeGroupIdentifier, isLumpSum, repetitionTo, standardizedDescription, complementedByQuantities, executionDescriptionReference, notOffered, oenormPositionProperties, descriptionId, hierarchyLevel, addendumStatus, hasBidderCommentInHtmlLongText, gaebComplementingType, holdOutProperties, estimatedQuantity, priceCatalogueData, ignoreProjectCataloguePropagation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    unitPriceOverride: ").append(toIndentedString(unitPriceOverride)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityOverride: ").append(toIndentedString(quantityOverride)).append("\n");
    sb.append("    isComplementingPosition: ").append(toIndentedString(isComplementingPosition)).append("\n");
    sb.append("    complementsPositions: ").append(toIndentedString(complementsPositions)).append("\n");
    sb.append("    complementingPricePercentageOverride: ").append(toIndentedString(complementingPricePercentageOverride)).append("\n");
    sb.append("    complementingPricePercentage: ").append(toIndentedString(complementingPricePercentage)).append("\n");
    sb.append("    unitTag: ").append(toIndentedString(unitTag)).append("\n");
    sb.append("    labourComponents: ").append(toIndentedString(labourComponents)).append("\n");
    sb.append("    priceComponents: ").append(toIndentedString(priceComponents)).append("\n");
    sb.append("    quantityComponents: ").append(toIndentedString(quantityComponents)).append("\n");
    sb.append("    subDescriptions: ").append(toIndentedString(subDescriptions)).append("\n");
    sb.append("    comissionStatus: ").append(toIndentedString(comissionStatus)).append("\n");
    sb.append("    complementedBy: ").append(toIndentedString(complementedBy)).append("\n");
    sb.append("    complemented: ").append(toIndentedString(complemented)).append("\n");
    sb.append("    amountToBeEnteredByBidder: ").append(toIndentedString(amountToBeEnteredByBidder)).append("\n");
    sb.append("    priceCompositionRequired: ").append(toIndentedString(priceCompositionRequired)).append("\n");
    sb.append("    useDifferentTaxRate: ").append(toIndentedString(useDifferentTaxRate)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    itemNumber: ").append(toIndentedString(itemNumber)).append("\n");
    sb.append("    deductionFactor: ").append(toIndentedString(deductionFactor)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    totalPriceGross: ").append(toIndentedString(totalPriceGross)).append("\n");
    sb.append("    totalPriceGrossDeducted: ").append(toIndentedString(totalPriceGrossDeducted)).append("\n");
    sb.append("    deductedPrice: ").append(toIndentedString(deductedPrice)).append("\n");
    sb.append("    positionType: ").append(toIndentedString(positionType)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    productData: ").append(toIndentedString(productData)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    htmlLongText: ").append(toIndentedString(htmlLongText)).append("\n");
    sb.append("    additionType: ").append(toIndentedString(additionType)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    quantityAssignments: ").append(toIndentedString(quantityAssignments)).append("\n");
    sb.append("    commerceProperties: ").append(toIndentedString(commerceProperties)).append("\n");
    sb.append("    alternativeTo: ").append(toIndentedString(alternativeTo)).append("\n");
    sb.append("    alternativeIdentifier: ").append(toIndentedString(alternativeIdentifier)).append("\n");
    sb.append("    alternativeGroupIdentifier: ").append(toIndentedString(alternativeGroupIdentifier)).append("\n");
    sb.append("    isLumpSum: ").append(toIndentedString(isLumpSum)).append("\n");
    sb.append("    repetitionTo: ").append(toIndentedString(repetitionTo)).append("\n");
    sb.append("    standardizedDescription: ").append(toIndentedString(standardizedDescription)).append("\n");
    sb.append("    complementedByQuantities: ").append(toIndentedString(complementedByQuantities)).append("\n");
    sb.append("    executionDescriptionReference: ").append(toIndentedString(executionDescriptionReference)).append("\n");
    sb.append("    notOffered: ").append(toIndentedString(notOffered)).append("\n");
    sb.append("    oenormPositionProperties: ").append(toIndentedString(oenormPositionProperties)).append("\n");
    sb.append("    descriptionId: ").append(toIndentedString(descriptionId)).append("\n");
    sb.append("    hierarchyLevel: ").append(toIndentedString(hierarchyLevel)).append("\n");
    sb.append("    addendumStatus: ").append(toIndentedString(addendumStatus)).append("\n");
    sb.append("    hasBidderCommentInHtmlLongText: ").append(toIndentedString(hasBidderCommentInHtmlLongText)).append("\n");
    sb.append("    gaebComplementingType: ").append(toIndentedString(gaebComplementingType)).append("\n");
    sb.append("    holdOutProperties: ").append(toIndentedString(holdOutProperties)).append("\n");
    sb.append("    estimatedQuantity: ").append(toIndentedString(estimatedQuantity)).append("\n");
    sb.append("    priceCatalogueData: ").append(toIndentedString(priceCatalogueData)).append("\n");
    sb.append("    ignoreProjectCataloguePropagation: ").append(toIndentedString(ignoreProjectCataloguePropagation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

