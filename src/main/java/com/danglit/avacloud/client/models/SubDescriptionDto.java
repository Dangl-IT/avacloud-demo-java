/*
 * AVACloud API 1.9.1
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.9.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AdditionTypeDto;
import com.danglit.avacloud.client.models.CalculationDto;
import com.danglit.avacloud.client.models.StandardizedDescriptionDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.
 */
@ApiModel(description = "This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-27T19:12:20.812Z")
public class SubDescriptionDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("quantity")
  private BigDecimal quantity = null;

  @SerializedName("quantityComponents")
  private List<CalculationDto> quantityComponents = null;

  @SerializedName("amountToBeEnteredByBidder")
  private Boolean amountToBeEnteredByBidder = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("longText")
  private String longText = null;

  @SerializedName("htmlLongText")
  private String htmlLongText = null;

  @SerializedName("additionType")
  private AdditionTypeDto additionType = null;

  @SerializedName("standardizedDescription")
  private StandardizedDescriptionDto standardizedDescription = null;

  public SubDescriptionDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Elements GUID identifier.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Elements GUID identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.
   * @return quantity
  **/
  @ApiModelProperty(required = true, value = "Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.")
  public BigDecimal getQuantity() {
    return quantity;
  }

  public SubDescriptionDto quantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
    return this;
  }

  public SubDescriptionDto addQuantityComponentsItem(CalculationDto quantityComponentsItem) {
    if (this.quantityComponents == null) {
      this.quantityComponents = new ArrayList<>();
    }
    this.quantityComponents.add(quantityComponentsItem);
    return this;
  }

   /**
   * Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.
   * @return quantityComponents
  **/
  @ApiModelProperty(value = "Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.")
  public List<CalculationDto> getQuantityComponents() {
    return quantityComponents;
  }

  public void setQuantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
  }

  public SubDescriptionDto amountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
    return this;
  }

   /**
   * Indicates if the bidder is asked to specify an amount.
   * @return amountToBeEnteredByBidder
  **/
  @ApiModelProperty(required = true, value = "Indicates if the bidder is asked to specify an amount.")
  public Boolean isAmountToBeEnteredByBidder() {
    return amountToBeEnteredByBidder;
  }

  public void setAmountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
  }

  public SubDescriptionDto identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifier for this SubDescription.
   * @return identifier
  **/
  @ApiModelProperty(value = "Identifier for this SubDescription.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public SubDescriptionDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Short description for this DescriptionBase element.
   * @return shortText
  **/
  @ApiModelProperty(value = "Short description for this DescriptionBase element.")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public SubDescriptionDto longText(String longText) {
    this.longText = longText;
    return this;
  }

   /**
   * Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
   * @return longText
  **/
  @ApiModelProperty(value = "Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.")
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }

  public SubDescriptionDto htmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
    return this;
  }

   /**
   * This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
   * @return htmlLongText
  **/
  @ApiModelProperty(value = "This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.")
  public String getHtmlLongText() {
    return htmlLongText;
  }

  public void setHtmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
  }

  public SubDescriptionDto additionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
    return this;
  }

   /**
   * Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
   * @return additionType
  **/
  @ApiModelProperty(required = true, value = "Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.")
  public AdditionTypeDto getAdditionType() {
    return additionType;
  }

  public void setAdditionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
  }

  public SubDescriptionDto standardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
    return this;
  }

   /**
   * This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
   * @return standardizedDescription
  **/
  @ApiModelProperty(value = "This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.")
  public StandardizedDescriptionDto getStandardizedDescription() {
    return standardizedDescription;
  }

  public void setStandardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubDescriptionDto subDescriptionDto = (SubDescriptionDto) o;
    return Objects.equals(this.id, subDescriptionDto.id) &&
        Objects.equals(this.quantity, subDescriptionDto.quantity) &&
        Objects.equals(this.quantityComponents, subDescriptionDto.quantityComponents) &&
        Objects.equals(this.amountToBeEnteredByBidder, subDescriptionDto.amountToBeEnteredByBidder) &&
        Objects.equals(this.identifier, subDescriptionDto.identifier) &&
        Objects.equals(this.shortText, subDescriptionDto.shortText) &&
        Objects.equals(this.longText, subDescriptionDto.longText) &&
        Objects.equals(this.htmlLongText, subDescriptionDto.htmlLongText) &&
        Objects.equals(this.additionType, subDescriptionDto.additionType) &&
        Objects.equals(this.standardizedDescription, subDescriptionDto.standardizedDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, quantity, quantityComponents, amountToBeEnteredByBidder, identifier, shortText, longText, htmlLongText, additionType, standardizedDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubDescriptionDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityComponents: ").append(toIndentedString(quantityComponents)).append("\n");
    sb.append("    amountToBeEnteredByBidder: ").append(toIndentedString(amountToBeEnteredByBidder)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    htmlLongText: ").append(toIndentedString(htmlLongText)).append("\n");
    sb.append("    additionType: ").append(toIndentedString(additionType)).append("\n");
    sb.append("    standardizedDescription: ").append(toIndentedString(standardizedDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

