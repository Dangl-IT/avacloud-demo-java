/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.AdditionTypeDto;
import com.danglit.avacloud.client.models.CalculationDto;
import com.danglit.avacloud.client.models.CatalogueDto;
import com.danglit.avacloud.client.models.StandardizedDescriptionDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.
 */
@ApiModel(description = "This is appended to a Position and is used to separate the complete Position into smaller amounts to be described separately, for example concrete walls could be attached to different building storeys.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-02-11T12:55:14.413Z")
public class SubDescriptionDto {
  @SerializedName("id")
  private String id = null;

  @SerializedName("quantity")
  private BigDecimal quantity = null;

  @SerializedName("quantityOverride")
  private BigDecimal quantityOverride = null;

  @SerializedName("quantityComponents")
  private List<CalculationDto> quantityComponents = null;

  @SerializedName("amountToBeEnteredByBidder")
  private Boolean amountToBeEnteredByBidder = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("shortText")
  private String shortText = null;

  @SerializedName("longText")
  private String longText = null;

  @SerializedName("unitTag")
  private String unitTag = null;

  @SerializedName("htmlLongText")
  private String htmlLongText = null;

  @SerializedName("additionType")
  private AdditionTypeDto additionType = null;

  @SerializedName("standardizedDescription")
  private StandardizedDescriptionDto standardizedDescription = null;

  @SerializedName("executionDescriptionReference")
  private String executionDescriptionReference = null;

  @SerializedName("projectCatalogues")
  private List<CatalogueDto> projectCatalogues = null;

  @SerializedName("descriptionId")
  private String descriptionId = null;

  @SerializedName("hasBidderCommentInHtmlLongText")
  private Boolean hasBidderCommentInHtmlLongText = null;

  @SerializedName("elementType")
  private String elementType = null;

  @SerializedName("elementTypeDiscriminator")
  private String elementTypeDiscriminator = null;

  public SubDescriptionDto id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Elements GUID identifier.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Elements GUID identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.
   * @return quantity
  **/
  @ApiModelProperty(required = true, value = "Returns the total calculated sum of all quantity assignments. Will return the result rounded to three decimal places.")
  public BigDecimal getQuantity() {
    return quantity;
  }

  public SubDescriptionDto quantityOverride(BigDecimal quantityOverride) {
    this.quantityOverride = quantityOverride;
    return this;
  }

   /**
   * You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents
   * @return quantityOverride
  **/
  @ApiModelProperty(value = "You can use this property to directly set the quantity for this sub description. This will override any given QuantityComponents")
  public BigDecimal getQuantityOverride() {
    return quantityOverride;
  }

  public void setQuantityOverride(BigDecimal quantityOverride) {
    this.quantityOverride = quantityOverride;
  }

  public SubDescriptionDto quantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
    return this;
  }

  public SubDescriptionDto addQuantityComponentsItem(CalculationDto quantityComponentsItem) {
    if (this.quantityComponents == null) {
      this.quantityComponents = new ArrayList<>();
    }
    this.quantityComponents.add(quantityComponentsItem);
    return this;
  }

   /**
   * Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.
   * @return quantityComponents
  **/
  @ApiModelProperty(value = "Holds quantity information for this sub description. Quantity is listening to changes here and is reporting the total sum of all quantity components.")
  public List<CalculationDto> getQuantityComponents() {
    return quantityComponents;
  }

  public void setQuantityComponents(List<CalculationDto> quantityComponents) {
    this.quantityComponents = quantityComponents;
  }

  public SubDescriptionDto amountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
    return this;
  }

   /**
   * Indicates if the bidder is asked to specify an amount.
   * @return amountToBeEnteredByBidder
  **/
  @ApiModelProperty(required = true, value = "Indicates if the bidder is asked to specify an amount.")
  public Boolean isAmountToBeEnteredByBidder() {
    return amountToBeEnteredByBidder;
  }

  public void setAmountToBeEnteredByBidder(Boolean amountToBeEnteredByBidder) {
    this.amountToBeEnteredByBidder = amountToBeEnteredByBidder;
  }

  public SubDescriptionDto identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifier for this SubDescription.
   * @return identifier
  **/
  @ApiModelProperty(value = "Identifier for this SubDescription.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public SubDescriptionDto shortText(String shortText) {
    this.shortText = shortText;
    return this;
  }

   /**
   * Short description for this DescriptionBase element.
   * @return shortText
  **/
  @ApiModelProperty(value = "Short description for this DescriptionBase element.")
  public String getShortText() {
    return shortText;
  }

  public void setShortText(String shortText) {
    this.shortText = shortText;
  }

  public SubDescriptionDto longText(String longText) {
    this.longText = longText;
    return this;
  }

   /**
   * Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.
   * @return longText
  **/
  @ApiModelProperty(value = "Detailed description for this DescriptionBase element. When the HtmlLongText is set, this is automatically overwritten and filled with the appropriate plain text representation of the Html text. Vice versa, setting this property overrides the HtmlLongText.")
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }

  public SubDescriptionDto unitTag(String unitTag) {
    this.unitTag = unitTag;
    return this;
  }

   /**
   * If this is given, then the sub description has a different unit tag than the parent position.
   * @return unitTag
  **/
  @ApiModelProperty(value = "If this is given, then the sub description has a different unit tag than the parent position.")
  public String getUnitTag() {
    return unitTag;
  }

  public void setUnitTag(String unitTag) {
    this.unitTag = unitTag;
  }

  public SubDescriptionDto htmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
    return this;
  }

   /**
   * This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.
   * @return htmlLongText
  **/
  @ApiModelProperty(value = "This contains the Html representation of the Longtext. When the LongText is set, this is automatically overwritten and filled with the appropriate Html representation of the plaintext. Vice versa, setting this property overrides the LongText. GAEB 90 and GAEB 2000 exports do not support any image functionality. In GAEB XML, only images that use an embedded Base64 data uri are exported, regular url references are cleared before written out.")
  public String getHtmlLongText() {
    return htmlLongText;
  }

  public void setHtmlLongText(String htmlLongText) {
    this.htmlLongText = htmlLongText;
  }

  public SubDescriptionDto additionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
    return this;
  }

   /**
   * Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.
   * @return additionType
  **/
  @ApiModelProperty(required = true, value = "Indicates if this DescriptionBase element contains Buyer or Bidder additions to the text.")
  public AdditionTypeDto getAdditionType() {
    return additionType;
  }

  public void setAdditionType(AdditionTypeDto additionType) {
    this.additionType = additionType;
  }

  public SubDescriptionDto standardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
    return this;
  }

   /**
   * This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
   * @return standardizedDescription
  **/
  @ApiModelProperty(value = "This represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.")
  public StandardizedDescriptionDto getStandardizedDescription() {
    return standardizedDescription;
  }

  public void setStandardizedDescription(StandardizedDescriptionDto standardizedDescription) {
    this.standardizedDescription = standardizedDescription;
  }

  public SubDescriptionDto executionDescriptionReference(String executionDescriptionReference) {
    this.executionDescriptionReference = executionDescriptionReference;
    return this;
  }

   /**
   * This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.
   * @return executionDescriptionReference
  **/
  @ApiModelProperty(value = "This identifier can be used to point to the Id of an ExecutionDescription in the same ServiceSpecification. ExecutionDescriptions act as a way to centrally describe how positions (or sub descriptions) should be executed in practice. Often, the position (or sub description) itself still has text of its own to highlight deviations from that or add more details. When working with import and export features, this property is only supported in GAEB 90 data exchange.")
  public String getExecutionDescriptionReference() {
    return executionDescriptionReference;
  }

  public void setExecutionDescriptionReference(String executionDescriptionReference) {
    this.executionDescriptionReference = executionDescriptionReference;
  }

  public SubDescriptionDto projectCatalogues(List<CatalogueDto> projectCatalogues) {
    this.projectCatalogues = projectCatalogues;
    return this;
  }

  public SubDescriptionDto addProjectCataloguesItem(CatalogueDto projectCataloguesItem) {
    if (this.projectCatalogues == null) {
      this.projectCatalogues = new ArrayList<>();
    }
    this.projectCatalogues.add(projectCataloguesItem);
    return this;
  }

   /**
   * These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.
   * @return projectCatalogues
  **/
  @ApiModelProperty(value = "These are Catalogues that are used within this Calculation. Catalogues are used to describe catalogues, or collections, that can be used to describe elements with commonly known properties. For example, QuantityAssignments use these to categorize themselves. They are propagate to all child elements, e.g. other containers and QuantityAssignments. In the context of a ServiceSpecification, all elements share the same instance of the collection.")
  public List<CatalogueDto> getProjectCatalogues() {
    return projectCatalogues;
  }

  public void setProjectCatalogues(List<CatalogueDto> projectCatalogues) {
    this.projectCatalogues = projectCatalogues;
  }

  public SubDescriptionDto descriptionId(String descriptionId) {
    this.descriptionId = descriptionId;
    return this;
  }

   /**
   * This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It&#39;s different to an elements identifier in that it should only apply to the description component, meaning the text itself.
   * @return descriptionId
  **/
  @ApiModelProperty(value = "This is an identifier specific for this description. Some exchange formats, like GAEB XML, use it to identify descriptions. It's different to an elements identifier in that it should only apply to the description component, meaning the text itself.")
  public String getDescriptionId() {
    return descriptionId;
  }

  public void setDescriptionId(String descriptionId) {
    this.descriptionId = descriptionId;
  }

   /**
   * Get hasBidderCommentInHtmlLongText
   * @return hasBidderCommentInHtmlLongText
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isHasBidderCommentInHtmlLongText() {
    return hasBidderCommentInHtmlLongText;
  }

  public SubDescriptionDto elementType(String elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public String getElementType() {
    return elementType;
  }

  public void setElementType(String elementType) {
    this.elementType = elementType;
  }

  public SubDescriptionDto elementTypeDiscriminator(String elementTypeDiscriminator) {
    this.elementTypeDiscriminator = elementTypeDiscriminator;
    return this;
  }

   /**
   * Get elementTypeDiscriminator
   * @return elementTypeDiscriminator
  **/
  @ApiModelProperty(value = "")
  public String getElementTypeDiscriminator() {
    return elementTypeDiscriminator;
  }

  public void setElementTypeDiscriminator(String elementTypeDiscriminator) {
    this.elementTypeDiscriminator = elementTypeDiscriminator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubDescriptionDto subDescriptionDto = (SubDescriptionDto) o;
    return Objects.equals(this.id, subDescriptionDto.id) &&
        Objects.equals(this.quantity, subDescriptionDto.quantity) &&
        Objects.equals(this.quantityOverride, subDescriptionDto.quantityOverride) &&
        Objects.equals(this.quantityComponents, subDescriptionDto.quantityComponents) &&
        Objects.equals(this.amountToBeEnteredByBidder, subDescriptionDto.amountToBeEnteredByBidder) &&
        Objects.equals(this.identifier, subDescriptionDto.identifier) &&
        Objects.equals(this.shortText, subDescriptionDto.shortText) &&
        Objects.equals(this.longText, subDescriptionDto.longText) &&
        Objects.equals(this.unitTag, subDescriptionDto.unitTag) &&
        Objects.equals(this.htmlLongText, subDescriptionDto.htmlLongText) &&
        Objects.equals(this.additionType, subDescriptionDto.additionType) &&
        Objects.equals(this.standardizedDescription, subDescriptionDto.standardizedDescription) &&
        Objects.equals(this.executionDescriptionReference, subDescriptionDto.executionDescriptionReference) &&
        Objects.equals(this.projectCatalogues, subDescriptionDto.projectCatalogues) &&
        Objects.equals(this.descriptionId, subDescriptionDto.descriptionId) &&
        Objects.equals(this.hasBidderCommentInHtmlLongText, subDescriptionDto.hasBidderCommentInHtmlLongText) &&
        Objects.equals(this.elementType, subDescriptionDto.elementType) &&
        Objects.equals(this.elementTypeDiscriminator, subDescriptionDto.elementTypeDiscriminator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, quantity, quantityOverride, quantityComponents, amountToBeEnteredByBidder, identifier, shortText, longText, unitTag, htmlLongText, additionType, standardizedDescription, executionDescriptionReference, projectCatalogues, descriptionId, hasBidderCommentInHtmlLongText, elementType, elementTypeDiscriminator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubDescriptionDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityOverride: ").append(toIndentedString(quantityOverride)).append("\n");
    sb.append("    quantityComponents: ").append(toIndentedString(quantityComponents)).append("\n");
    sb.append("    amountToBeEnteredByBidder: ").append(toIndentedString(amountToBeEnteredByBidder)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    shortText: ").append(toIndentedString(shortText)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    unitTag: ").append(toIndentedString(unitTag)).append("\n");
    sb.append("    htmlLongText: ").append(toIndentedString(htmlLongText)).append("\n");
    sb.append("    additionType: ").append(toIndentedString(additionType)).append("\n");
    sb.append("    standardizedDescription: ").append(toIndentedString(standardizedDescription)).append("\n");
    sb.append("    executionDescriptionReference: ").append(toIndentedString(executionDescriptionReference)).append("\n");
    sb.append("    projectCatalogues: ").append(toIndentedString(projectCatalogues)).append("\n");
    sb.append("    descriptionId: ").append(toIndentedString(descriptionId)).append("\n");
    sb.append("    hasBidderCommentInHtmlLongText: ").append(toIndentedString(hasBidderCommentInHtmlLongText)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    elementTypeDiscriminator: ").append(toIndentedString(elementTypeDiscriminator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

