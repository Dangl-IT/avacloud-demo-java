/*
 * AVACloud API 1.10.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.STLBReferenceDto;
import com.danglit.avacloud.client.models.StandardReferenceTypeDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This class represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.
 */
@ApiModel(description = "This class represents a standardized description. This means that instead of solely relying on texts to describe a service, external standards and definitions are referenced for a common understanding.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T17:38:52.250Z")
public class StandardizedDescriptionDto {
  @SerializedName("standardReferenceType")
  private StandardReferenceTypeDto standardReferenceType = null;

  @SerializedName("standardReference")
  private String standardReference = null;

  @SerializedName("stlbReference")
  private STLBReferenceDto stlbReference = null;

  public StandardizedDescriptionDto standardReferenceType(StandardReferenceTypeDto standardReferenceType) {
    this.standardReferenceType = standardReferenceType;
    return this;
  }

   /**
   * This enumeration identifies a pre-known standard used for referencing standardized descriptions.
   * @return standardReferenceType
  **/
  @ApiModelProperty(required = true, value = "This enumeration identifies a pre-known standard used for referencing standardized descriptions.")
  public StandardReferenceTypeDto getStandardReferenceType() {
    return standardReferenceType;
  }

  public void setStandardReferenceType(StandardReferenceTypeDto standardReferenceType) {
    this.standardReferenceType = standardReferenceType;
  }

  public StandardizedDescriptionDto standardReference(String standardReference) {
    this.standardReference = standardReference;
    return this;
  }

   /**
   * This string property is the identifier to map to the references standard. Its type is given in the StandardReferenceType
   * @return standardReference
  **/
  @ApiModelProperty(value = "This string property is the identifier to map to the references standard. Its type is given in the StandardReferenceType")
  public String getStandardReference() {
    return standardReference;
  }

  public void setStandardReference(String standardReference) {
    this.standardReference = standardReference;
  }

  public StandardizedDescriptionDto stlbReference(STLBReferenceDto stlbReference) {
    this.stlbReference = stlbReference;
    return this;
  }

   /**
   * This is a special reference to the German STLB \&quot;Standardleistungsbuch Bau\&quot; reference. If this is used, the StandardReference property should not be set.
   * @return stlbReference
  **/
  @ApiModelProperty(value = "This is a special reference to the German STLB \"Standardleistungsbuch Bau\" reference. If this is used, the StandardReference property should not be set.")
  public STLBReferenceDto getStlbReference() {
    return stlbReference;
  }

  public void setStlbReference(STLBReferenceDto stlbReference) {
    this.stlbReference = stlbReference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardizedDescriptionDto standardizedDescriptionDto = (StandardizedDescriptionDto) o;
    return Objects.equals(this.standardReferenceType, standardizedDescriptionDto.standardReferenceType) &&
        Objects.equals(this.standardReference, standardizedDescriptionDto.standardReference) &&
        Objects.equals(this.stlbReference, standardizedDescriptionDto.stlbReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(standardReferenceType, standardReference, stlbReference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardizedDescriptionDto {\n");
    
    sb.append("    standardReferenceType: ").append(toIndentedString(standardReferenceType)).append("\n");
    sb.append("    standardReference: ").append(toIndentedString(standardReference)).append("\n");
    sb.append("    stlbReference: ").append(toIndentedString(stlbReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

