/*
 * AVACloud API 1.59.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.59.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.PaymentMeans;
import com.danglit.avacloud.client.models.PaymentType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Instructions how payment for an invoice should be provided.
 */
@ApiModel(description = "Instructions how payment for an invoice should be provided.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-09T18:36:39.750Z")
public class PaymentInstructions {
  @SerializedName("description")
  private String description = null;

  @SerializedName("paymentTypeCode")
  private String paymentTypeCode = null;

  @SerializedName("paymentType")
  private PaymentType paymentType = null;

  @SerializedName("paymentCreditorIdentifier")
  private String paymentCreditorIdentifier = null;

  @SerializedName("paymentMeans")
  private List<PaymentMeans> paymentMeans = null;

  public PaymentInstructions description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Additional text to describe the payment instructions.
   * @return description
  **/
  @ApiModelProperty(value = "Additional text to describe the payment instructions.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PaymentInstructions paymentTypeCode(String paymentTypeCode) {
    this.paymentTypeCode = paymentTypeCode;
    return this;
  }

   /**
   * This should be a code according to UNCL 4461 to identify the type of payment. For example, code \&quot;58\&quot; means SEPA Credit Transfer, and code \&quot;30\&quot; means non-SEPA Credit Transfer. See this list: https://docs.peppol.eu/poacc/billing/3.0/codelist/UNCL4461/
   * @return paymentTypeCode
  **/
  @ApiModelProperty(value = "This should be a code according to UNCL 4461 to identify the type of payment. For example, code \"58\" means SEPA Credit Transfer, and code \"30\" means non-SEPA Credit Transfer. See this list: https://docs.peppol.eu/poacc/billing/3.0/codelist/UNCL4461/")
  public String getPaymentTypeCode() {
    return paymentTypeCode;
  }

  public void setPaymentTypeCode(String paymentTypeCode) {
    this.paymentTypeCode = paymentTypeCode;
  }

  public PaymentInstructions paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * This should be a type according to UNCL 4461 to identify the type of payment.
   * @return paymentType
  **/
  @ApiModelProperty(value = "This should be a type according to UNCL 4461 to identify the type of payment.")
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }

  public PaymentInstructions paymentCreditorIdentifier(String paymentCreditorIdentifier) {
    this.paymentCreditorIdentifier = paymentCreditorIdentifier;
    return this;
  }

   /**
   * If a SEPA direct debit payment mean is used, then this reference should be provided. It&#39;s the creditor identifier in SEPA, in German \&quot;Gläubiger-Identifikationsnummer\&quot;. Field BT-90 in XRechnung.
   * @return paymentCreditorIdentifier
  **/
  @ApiModelProperty(value = "If a SEPA direct debit payment mean is used, then this reference should be provided. It's the creditor identifier in SEPA, in German \"Gläubiger-Identifikationsnummer\". Field BT-90 in XRechnung.")
  public String getPaymentCreditorIdentifier() {
    return paymentCreditorIdentifier;
  }

  public void setPaymentCreditorIdentifier(String paymentCreditorIdentifier) {
    this.paymentCreditorIdentifier = paymentCreditorIdentifier;
  }

  public PaymentInstructions paymentMeans(List<PaymentMeans> paymentMeans) {
    this.paymentMeans = paymentMeans;
    return this;
  }

  public PaymentInstructions addPaymentMeansItem(PaymentMeans paymentMeansItem) {
    if (this.paymentMeans == null) {
      this.paymentMeans = new ArrayList<>();
    }
    this.paymentMeans.add(paymentMeansItem);
    return this;
  }

   /**
   * A list of payment means that can be used to pay the invoice.
   * @return paymentMeans
  **/
  @ApiModelProperty(value = "A list of payment means that can be used to pay the invoice.")
  public List<PaymentMeans> getPaymentMeans() {
    return paymentMeans;
  }

  public void setPaymentMeans(List<PaymentMeans> paymentMeans) {
    this.paymentMeans = paymentMeans;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInstructions paymentInstructions = (PaymentInstructions) o;
    return Objects.equals(this.description, paymentInstructions.description) &&
        Objects.equals(this.paymentTypeCode, paymentInstructions.paymentTypeCode) &&
        Objects.equals(this.paymentType, paymentInstructions.paymentType) &&
        Objects.equals(this.paymentCreditorIdentifier, paymentInstructions.paymentCreditorIdentifier) &&
        Objects.equals(this.paymentMeans, paymentInstructions.paymentMeans);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, paymentTypeCode, paymentType, paymentCreditorIdentifier, paymentMeans);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInstructions {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    paymentTypeCode: ").append(toIndentedString(paymentTypeCode)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentCreditorIdentifier: ").append(toIndentedString(paymentCreditorIdentifier)).append("\n");
    sb.append("    paymentMeans: ").append(toIndentedString(paymentMeans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

