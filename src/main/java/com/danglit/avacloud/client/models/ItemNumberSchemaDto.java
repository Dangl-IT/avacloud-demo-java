/*
 * AVACloud API 1.55.0
 * AVACloud API specification
 *
 * OpenAPI spec version: 1.55.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.danglit.avacloud.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.danglit.avacloud.client.models.ItemNumberSchemaTierDto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The schema for ItemNumber&#39;s in a Project.
 */
@ApiModel(description = "The schema for ItemNumber's in a Project.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-02-11T12:55:14.413Z")
public class ItemNumberSchemaDto {
  @SerializedName("totalLength")
  private Integer totalLength = null;

  @SerializedName("tiers")
  private List<ItemNumberSchemaTierDto> tiers = null;

  @SerializedName("separator")
  private String separator = null;

  @SerializedName("filler")
  private String filler = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("skipNonExistingLevelsInPositionItemNumbers")
  private Boolean skipNonExistingLevelsInPositionItemNumbers = null;

  @SerializedName("skippedTiersFiller")
  private String skippedTiersFiller = null;

  @SerializedName("schemaIsCorrectlyDefined")
  private Boolean schemaIsCorrectlyDefined = null;

  @SerializedName("allowUpperCaseLettering")
  private Boolean allowUpperCaseLettering = null;

  @SerializedName("disableLeftPaddingTiersWithFiller")
  private Boolean disableLeftPaddingTiersWithFiller = null;

   /**
   * The count of tiers in the ItemNumberSchema
   * @return totalLength
  **/
  @ApiModelProperty(required = true, value = "The count of tiers in the ItemNumberSchema")
  public Integer getTotalLength() {
    return totalLength;
  }

  public ItemNumberSchemaDto tiers(List<ItemNumberSchemaTierDto> tiers) {
    this.tiers = tiers;
    return this;
  }

  public ItemNumberSchemaDto addTiersItem(ItemNumberSchemaTierDto tiersItem) {
    if (this.tiers == null) {
      this.tiers = new ArrayList<>();
    }
    this.tiers.add(tiersItem);
    return this;
  }

   /**
   * The collection of tiers for this ItemNumberSchema.
   * @return tiers
  **/
  @ApiModelProperty(value = "The collection of tiers for this ItemNumberSchema.")
  public List<ItemNumberSchemaTierDto> getTiers() {
    return tiers;
  }

  public void setTiers(List<ItemNumberSchemaTierDto> tiers) {
    this.tiers = tiers;
  }

  public ItemNumberSchemaDto separator(String separator) {
    this.separator = separator;
    return this;
  }

   /**
   * The separator to use for separiting the different levels in an ItemNumber. Defaults to DEFAULT_SEPARATOR, which is a point &#39;.&#39;. Setting this to a space or other whitespaces is discouraged, as this might not work correct in all situations and item numbers could be displayed not as intended. This can not be set to an empty or null string, trying that will default to the DEFAULT_SEPARATOR. If a value is set that has a different length than one &#39;1&#39;, the DEFAULT_SEPARATOR will be used instead. You should also not use values for the separator that are also valid for the item numbers themselves, as that might also lead to incorrect results
   * @return separator
  **/
  @ApiModelProperty(value = "The separator to use for separiting the different levels in an ItemNumber. Defaults to DEFAULT_SEPARATOR, which is a point '.'. Setting this to a space or other whitespaces is discouraged, as this might not work correct in all situations and item numbers could be displayed not as intended. This can not be set to an empty or null string, trying that will default to the DEFAULT_SEPARATOR. If a value is set that has a different length than one '1', the DEFAULT_SEPARATOR will be used instead. You should also not use values for the separator that are also valid for the item numbers themselves, as that might also lead to incorrect results")
  public String getSeparator() {
    return separator;
  }

  public void setSeparator(String separator) {
    this.separator = separator;
  }

  public ItemNumberSchemaDto filler(String filler) {
    this.filler = filler;
    return this;
  }

   /**
   * This string is used to fill (left-pad) item numbers. For example, if a tier has a length of &#39;4&#39; but the given item number is &#39;12&#39;, with a Filler of &#39;0&#39;, then the final item number will be represented as &#39;0&#39;. This must be a single character string, if a value is given where the Length property does not evaluate to &#39;1&#39;, the DEFAULT_FILLER &#39;0&#39; is used. A space is fine to use. You should ensure that you use a value different than Separator, as that might produce unexpected results. No attempt is done by the code to recover from such ambiguous configurations.
   * @return filler
  **/
  @ApiModelProperty(value = "This string is used to fill (left-pad) item numbers. For example, if a tier has a length of '4' but the given item number is '12', with a Filler of '0', then the final item number will be represented as '0'. This must be a single character string, if a value is given where the Length property does not evaluate to '1', the DEFAULT_FILLER '0' is used. A space is fine to use. You should ensure that you use a value different than Separator, as that might produce unexpected results. No attempt is done by the code to recover from such ambiguous configurations.")
  public String getFiller() {
    return filler;
  }

  public void setFiller(String filler) {
    this.filler = filler;
  }

  public ItemNumberSchemaDto identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * This is just a string property that can optionally be used to store additional data for this ItemNumberSchema, e.g. an identification or a type. It does not have any influence over how item numbers are generated, and is not supported in most exchange formats. However, it is used to store ÖNorm service specification structure types.
   * @return identifier
  **/
  @ApiModelProperty(value = "This is just a string property that can optionally be used to store additional data for this ItemNumberSchema, e.g. an identification or a type. It does not have any influence over how item numbers are generated, and is not supported in most exchange formats. However, it is used to store ÖNorm service specification structure types.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public ItemNumberSchemaDto skipNonExistingLevelsInPositionItemNumbers(Boolean skipNonExistingLevelsInPositionItemNumbers) {
    this.skipNonExistingLevelsInPositionItemNumbers = skipNonExistingLevelsInPositionItemNumbers;
    return this;
  }

   /**
   * This property indicates if ItemNumbers using this ItemNumberSchema should skip empty group levels. This is commonly only used in GAEB files, where there might be gaps in the hierarchy of elements and position identifiers should be placed at the end of the string representation.
   * @return skipNonExistingLevelsInPositionItemNumbers
  **/
  @ApiModelProperty(required = true, value = "This property indicates if ItemNumbers using this ItemNumberSchema should skip empty group levels. This is commonly only used in GAEB files, where there might be gaps in the hierarchy of elements and position identifiers should be placed at the end of the string representation.")
  public Boolean isSkipNonExistingLevelsInPositionItemNumbers() {
    return skipNonExistingLevelsInPositionItemNumbers;
  }

  public void setSkipNonExistingLevelsInPositionItemNumbers(Boolean skipNonExistingLevelsInPositionItemNumbers) {
    this.skipNonExistingLevelsInPositionItemNumbers = skipNonExistingLevelsInPositionItemNumbers;
  }

  public ItemNumberSchemaDto skippedTiersFiller(String skippedTiersFiller) {
    this.skippedTiersFiller = skippedTiersFiller;
    return this;
  }

   /**
   * This string is used only when the property SkipNonExistingLevelsInPositionItemNumbers in this ItemNumberSchema is also set to true. It defaults to DEFAULT_SKIPPED_TIERS_FILLER, but can be set to any string with a lenght of one. Null values or values with a longer length will lead to this property reverting back to the default value. This is used to fill skipped tiers in item numbers where a position is placed in a higher hierarchy level than what would be defined in the Tiers. For example, it could produce an item number like &#39;01.__.02&#39;, which would indicate a skipped second level. This should be using different values than Filler and Separator, since that could cause ambiguities in the code that generates the actual item numbers. No attempt is done by the code to recover from such ambiguous configurations.
   * @return skippedTiersFiller
  **/
  @ApiModelProperty(value = "This string is used only when the property SkipNonExistingLevelsInPositionItemNumbers in this ItemNumberSchema is also set to true. It defaults to DEFAULT_SKIPPED_TIERS_FILLER, but can be set to any string with a lenght of one. Null values or values with a longer length will lead to this property reverting back to the default value. This is used to fill skipped tiers in item numbers where a position is placed in a higher hierarchy level than what would be defined in the Tiers. For example, it could produce an item number like '01.__.02', which would indicate a skipped second level. This should be using different values than Filler and Separator, since that could cause ambiguities in the code that generates the actual item numbers. No attempt is done by the code to recover from such ambiguous configurations.")
  public String getSkippedTiersFiller() {
    return skippedTiersFiller;
  }

  public void setSkippedTiersFiller(String skippedTiersFiller) {
    this.skippedTiersFiller = skippedTiersFiller;
  }

   /**
   * This is a read-only property that indicates if this schema has a valid structure. It internally just returns the result from IsCorrectlyDefined. This will return if the ItemNumberSchema is correctly defined. For it to be correctly defined, the following conditions must be true: There may only be one lot group, if there is one, it must be at the top. Following lot levels, there may be at least one group level. After the group levels, there must be one position level. After the position level, there may be one index level. If no tiers are defined at all, this will also return false.
   * @return schemaIsCorrectlyDefined
  **/
  @ApiModelProperty(required = true, value = "This is a read-only property that indicates if this schema has a valid structure. It internally just returns the result from IsCorrectlyDefined. This will return if the ItemNumberSchema is correctly defined. For it to be correctly defined, the following conditions must be true: There may only be one lot group, if there is one, it must be at the top. Following lot levels, there may be at least one group level. After the group levels, there must be one position level. After the position level, there may be one index level. If no tiers are defined at all, this will also return false.")
  public Boolean isSchemaIsCorrectlyDefined() {
    return schemaIsCorrectlyDefined;
  }

  public ItemNumberSchemaDto allowUpperCaseLettering(Boolean allowUpperCaseLettering) {
    this.allowUpperCaseLettering = allowUpperCaseLettering;
    return this;
  }

   /**
   * Defaults to false. If this is disabled, all letters in the ItemNumber string representations will be transformed to their lowercase representation.
   * @return allowUpperCaseLettering
  **/
  @ApiModelProperty(required = true, value = "Defaults to false. If this is disabled, all letters in the ItemNumber string representations will be transformed to their lowercase representation.")
  public Boolean isAllowUpperCaseLettering() {
    return allowUpperCaseLettering;
  }

  public void setAllowUpperCaseLettering(Boolean allowUpperCaseLettering) {
    this.allowUpperCaseLettering = allowUpperCaseLettering;
  }

  public ItemNumberSchemaDto disableLeftPaddingTiersWithFiller(Boolean disableLeftPaddingTiersWithFiller) {
    this.disableLeftPaddingTiersWithFiller = disableLeftPaddingTiersWithFiller;
    return this;
  }

   /**
   * If this is set to true, single identifiers in an item number will not be left padded to fill the length of the tier. This is useful for allowing custom formats in item numbers, without following the GAEB standard. Defaults to false.
   * @return disableLeftPaddingTiersWithFiller
  **/
  @ApiModelProperty(required = true, value = "If this is set to true, single identifiers in an item number will not be left padded to fill the length of the tier. This is useful for allowing custom formats in item numbers, without following the GAEB standard. Defaults to false.")
  public Boolean isDisableLeftPaddingTiersWithFiller() {
    return disableLeftPaddingTiersWithFiller;
  }

  public void setDisableLeftPaddingTiersWithFiller(Boolean disableLeftPaddingTiersWithFiller) {
    this.disableLeftPaddingTiersWithFiller = disableLeftPaddingTiersWithFiller;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemNumberSchemaDto itemNumberSchemaDto = (ItemNumberSchemaDto) o;
    return Objects.equals(this.totalLength, itemNumberSchemaDto.totalLength) &&
        Objects.equals(this.tiers, itemNumberSchemaDto.tiers) &&
        Objects.equals(this.separator, itemNumberSchemaDto.separator) &&
        Objects.equals(this.filler, itemNumberSchemaDto.filler) &&
        Objects.equals(this.identifier, itemNumberSchemaDto.identifier) &&
        Objects.equals(this.skipNonExistingLevelsInPositionItemNumbers, itemNumberSchemaDto.skipNonExistingLevelsInPositionItemNumbers) &&
        Objects.equals(this.skippedTiersFiller, itemNumberSchemaDto.skippedTiersFiller) &&
        Objects.equals(this.schemaIsCorrectlyDefined, itemNumberSchemaDto.schemaIsCorrectlyDefined) &&
        Objects.equals(this.allowUpperCaseLettering, itemNumberSchemaDto.allowUpperCaseLettering) &&
        Objects.equals(this.disableLeftPaddingTiersWithFiller, itemNumberSchemaDto.disableLeftPaddingTiersWithFiller);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalLength, tiers, separator, filler, identifier, skipNonExistingLevelsInPositionItemNumbers, skippedTiersFiller, schemaIsCorrectlyDefined, allowUpperCaseLettering, disableLeftPaddingTiersWithFiller);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemNumberSchemaDto {\n");
    
    sb.append("    totalLength: ").append(toIndentedString(totalLength)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("    separator: ").append(toIndentedString(separator)).append("\n");
    sb.append("    filler: ").append(toIndentedString(filler)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    skipNonExistingLevelsInPositionItemNumbers: ").append(toIndentedString(skipNonExistingLevelsInPositionItemNumbers)).append("\n");
    sb.append("    skippedTiersFiller: ").append(toIndentedString(skippedTiersFiller)).append("\n");
    sb.append("    schemaIsCorrectlyDefined: ").append(toIndentedString(schemaIsCorrectlyDefined)).append("\n");
    sb.append("    allowUpperCaseLettering: ").append(toIndentedString(allowUpperCaseLettering)).append("\n");
    sb.append("    disableLeftPaddingTiersWithFiller: ").append(toIndentedString(disableLeftPaddingTiersWithFiller)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

